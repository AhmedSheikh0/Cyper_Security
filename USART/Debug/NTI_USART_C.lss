
NTI_USART_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00002f72  00003006  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  008000aa  008000aa  00003050  2**0
                  ALLOC
  3 .stab         00002ae4  00000000  00000000  00003050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d1  00000000  00000000  00005b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007005  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007145  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000072b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000acf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b753  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__vector_13>
      38:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__vector_14>
      3c:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3e       	cpi	r26, 0xE5	; 229
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <main>
      8a:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e8       	ldi	r26, 0x81	; 129
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e8       	ldi	r24, 0x81	; 129
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidInit>:
void (*Private_voidRXFunc)(void) = NULL;
void (*Private_voidUDRFunc)(void) = NULL;
void (*Private_voidTXFunc)(void) = NULL;

void USART_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRC, UCSRC_URSEL); // Using UCSRC
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e0 e4       	ldi	r30, 0x40	; 64
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24

	// ASYNCHRONOUS MODE
#if 	MODE_OF_OPERATION == ASYNCHRONOUS
	Clear_Bit(UCSRC, UCSRC_UMSEL);
     b5c:	a0 e4       	ldi	r26, 0x40	; 64
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e0 e4       	ldi	r30, 0x40	; 64
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 7b       	andi	r24, 0xBF	; 191
     b68:	8c 93       	st	X, r24
	Clear_Bit(UCSRC, UCSRC_UCPOL);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e0 e4       	ldi	r30, 0x40	; 64
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	8c 93       	st	X, r24
	// Select Speed in Asynchronous MOde
#if 	SPEED_OPERATION == NORMAL_SPEED_MODE
	Clear_Bit(UCSRA, UCSRA_U2X);
#define UBRRL_VAL 	( (F_OC / (16 * BAUD_RATE) ) - 1)
#elif 	SPEED_OPERATION == DOUBLE_SPEED_MODE
	Set_Bit(UCSRA, UCSRA_U2X);
     b78:	ab e2       	ldi	r26, 0x2B	; 43
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	eb e2       	ldi	r30, 0x2B	; 43
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	8c 93       	st	X, r24
#define UBRRL_VAL ( (F_OC / (2 * BAUD_RATE) ) - 1)

#else
#endif

	Set_Bit(UCSRC, UCSRC_URSEL);
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 68       	ori	r24, 0x80	; 128
     b92:	8c 93       	st	X, r24

	// Selecting Frame
#if 	FRAME_SIZE == 8
	Set_Bit(UCSRC, UCSRC_UCSZ0);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
	Set_Bit(UCSRC, UCSRC_UCSZ1);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
	Clear_Bit(UCSRB, UCSRB_UCSZ2);
     bb0:	aa e2       	ldi	r26, 0x2A	; 42
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e2       	ldi	r30, 0x2A	; 42
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	8c 93       	st	X, r24
#endif


	// Selecting Parity Mode
#if 	PARITY_MODE == DISABLED_PARTITY
	Clear_Bit(UCSRC, UCSRC_UPM0);
     bbe:	a0 e4       	ldi	r26, 0x40	; 64
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e0 e4       	ldi	r30, 0x40	; 64
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 7e       	andi	r24, 0xEF	; 239
     bca:	8c 93       	st	X, r24
	Clear_Bit(UCSRC, UCSRC_UPM1);
     bcc:	a0 e4       	ldi	r26, 0x40	; 64
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e0 e4       	ldi	r30, 0x40	; 64
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8f 7d       	andi	r24, 0xDF	; 223
     bd8:	8c 93       	st	X, r24
	// Select Stop Bit
#if 	STOP_BIT_SELECT == ONE_BIT
	Clear_Bit(UCSRC, UCSRC_USBS);

#elif 	STOP_BIT_SELECT == TWO_BIT
	Set_Bit(UCSRC, UCSRC_USBS);
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	88 60       	ori	r24, 0x08	; 8
     be6:	8c 93       	st	X, r24

#else
#endif


	Clear_Bit(UCSRC, UCSRC_URSEL);
     be8:	a0 e4       	ldi	r26, 0x40	; 64
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e0 e4       	ldi	r30, 0x40	; 64
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8f 77       	andi	r24, 0x7F	; 127
     bf4:	8c 93       	st	X, r24
	// Calculating UBRRL value
	UCSRC = 0;
     bf6:	e0 e4       	ldi	r30, 0x40	; 64
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	10 82       	st	Z, r1
	UBRRL = UBRRL_VAL;
     bfc:	e9 e2       	ldi	r30, 0x29	; 41
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	8f ec       	ldi	r24, 0xCF	; 207
     c02:	80 83       	st	Z, r24

	// Enabling TX and RX
	Set_Bit(UCSRB, UCSRB_TXEN);
     c04:	aa e2       	ldi	r26, 0x2A	; 42
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e2       	ldi	r30, 0x2A	; 42
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	88 60       	ori	r24, 0x08	; 8
     c10:	8c 93       	st	X, r24
	Set_Bit(UCSRB, UCSRB_RXEN);
     c12:	aa e2       	ldi	r26, 0x2A	; 42
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ea e2       	ldi	r30, 0x2A	; 42
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	80 61       	ori	r24, 0x10	; 16
     c1e:	8c 93       	st	X, r24

}
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <USART_voidSend>:

void USART_voidSend(u8 Copy_u8Data)
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	0f 92       	push	r0
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	89 83       	std	Y+1, r24	; 0x01
	while(Get_Bit(UCSRA, UCSRA_UDRE) == 0 );
     c32:	eb e2       	ldi	r30, 0x2B	; 43
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	82 95       	swap	r24
     c3a:	86 95       	lsr	r24
     c3c:	87 70       	andi	r24, 0x07	; 7
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	81 70       	andi	r24, 0x01	; 1
     c44:	90 70       	andi	r25, 0x00	; 0
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	a1 f3       	breq	.-24     	; 0xc32 <USART_voidSend+0xc>

	UDR = Copy_u8Data;
     c4a:	ec e2       	ldi	r30, 0x2C	; 44
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	80 83       	st	Z, r24
}
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <USART_u8Receive>:


u8 USART_u8Receive(void)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
	while( Get_Bit(UCSRA, UCSRA_RXC) == 0 );
     c62:	eb e2       	ldi	r30, 0x2B	; 43
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	88 23       	and	r24, r24
     c6a:	dc f7       	brge	.-10     	; 0xc62 <USART_u8Receive+0x8>

	return UDR;
     c6c:	ec e2       	ldi	r30, 0x2C	; 44
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
}
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <USART_u8TransReceive>:

u8 USART_u8TransReceive( u8 Copy_u8Data )
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	0f 92       	push	r0
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDRE is zero to send
	while(Get_Bit(UCSRA, UCSRA_UDRE) == 0 );
     c84:	eb e2       	ldi	r30, 0x2B	; 43
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	82 95       	swap	r24
     c8c:	86 95       	lsr	r24
     c8e:	87 70       	andi	r24, 0x07	; 7
     c90:	88 2f       	mov	r24, r24
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	81 70       	andi	r24, 0x01	; 1
     c96:	90 70       	andi	r25, 0x00	; 0
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	a1 f3       	breq	.-24     	; 0xc84 <USART_u8TransReceive+0xc>
	UDR = Copy_u8Data;
     c9c:	ec e2       	ldi	r30, 0x2C	; 44
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	80 83       	st	Z, r24

	// Wait Until Receive flag is zero
	while( Get_Bit(UCSRA, UCSRA_RXC) == 0 );
     ca4:	eb e2       	ldi	r30, 0x2B	; 43
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	88 23       	and	r24, r24
     cac:	dc f7       	brge	.-10     	; 0xca4 <USART_u8TransReceive+0x2c>

	return UDR;
     cae:	ec e2       	ldi	r30, 0x2C	; 44
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z

}
     cb4:	0f 90       	pop	r0
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <USART_voidSendInterrupt>:

// Interrupt RX/TX

void USART_voidSendInterrupt(u8 Copy_u8Data)
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	0f 92       	push	r0
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	89 83       	std	Y+1, r24	; 0x01
	UDR = Copy_u8Data;
     cc8:	ec e2       	ldi	r30, 0x2C	; 44
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	80 83       	st	Z, r24
}
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <USART_u8ReceiveInterrupt>:

u8 USART_u8ReceiveInterrupt(void)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     ce0:	ec e2       	ldi	r30, 0x2C	; 44
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <USART_voidSendText>:

// RX/TX
void USART_voidSendText(char *Copy_u8Data)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <USART_voidSendText+0x6>
     cf2:	0f 92       	push	r0
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	9b 83       	std	Y+3, r25	; 0x03
     cfa:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     cfc:	19 82       	std	Y+1, r1	; 0x01
     cfe:	0e c0       	rjmp	.+28     	; 0xd1c <USART_voidSendText+0x30>

	while( *(Copy_u8Data + i) != '\0')
	{
		USART_voidSend( *(Copy_u8Data + i) );
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	9b 81       	ldd	r25, Y+3	; 0x03
     d0a:	fc 01       	movw	r30, r24
     d0c:	e2 0f       	add	r30, r18
     d0e:	f3 1f       	adc	r31, r19
     d10:	80 81       	ld	r24, Z
     d12:	0e 94 13 06 	call	0xc26	; 0xc26 <USART_voidSend>
		i++;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	89 83       	std	Y+1, r24	; 0x01
// RX/TX
void USART_voidSendText(char *Copy_u8Data)
{
	u8 i = 0;

	while( *(Copy_u8Data + i) != '\0')
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	9b 81       	ldd	r25, Y+3	; 0x03
     d26:	fc 01       	movw	r30, r24
     d28:	e2 0f       	add	r30, r18
     d2a:	f3 1f       	adc	r31, r19
     d2c:	80 81       	ld	r24, Z
     d2e:	88 23       	and	r24, r24
     d30:	39 f7       	brne	.-50     	; 0xd00 <USART_voidSendText+0x14>
	{
		USART_voidSend( *(Copy_u8Data + i) );
		i++;
	}

}
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <USART_voidReceiveText>:

void USART_voidReceiveText(char *Copy_u8Data)
{
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <USART_voidReceiveText+0xa>
     d48:	0f 92       	push	r0
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	9b 83       	std	Y+3, r25	; 0x03
     d50:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     d52:	19 82       	std	Y+1, r1	; 0x01
     d54:	0f c0       	rjmp	.+30     	; 0xd74 <USART_voidReceiveText+0x36>
	while( *(Copy_u8Data + i) != '\0' )
	{
		*(Copy_u8Data + i) = USART_u8Receive();
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	8c 01       	movw	r16, r24
     d62:	02 0f       	add	r16, r18
     d64:	13 1f       	adc	r17, r19
     d66:	0e 94 2d 06 	call	0xc5a	; 0xc5a <USART_u8Receive>
     d6a:	f8 01       	movw	r30, r16
     d6c:	80 83       	st	Z, r24
		i++;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	8f 5f       	subi	r24, 0xFF	; 255
     d72:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidReceiveText(char *Copy_u8Data)
{
	u8 i = 0;
	while( *(Copy_u8Data + i) != '\0' )
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	9b 81       	ldd	r25, Y+3	; 0x03
     d7e:	fc 01       	movw	r30, r24
     d80:	e2 0f       	add	r30, r18
     d82:	f3 1f       	adc	r31, r19
     d84:	80 81       	ld	r24, Z
     d86:	88 23       	and	r24, r24
     d88:	31 f7       	brne	.-52     	; 0xd56 <USART_voidReceiveText+0x18>
	{
		*(Copy_u8Data + i) = USART_u8Receive();
		i++;
	}
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <USART_voidRXCallBackFunc>:

void USART_voidRXCallBackFunc(void (*PTR)(void))
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <USART_voidRXCallBackFunc+0x6>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	31 f0       	breq	.+12     	; 0xdbc <USART_voidRXCallBackFunc+0x22>
	{
		Private_voidRXFunc = PTR;
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	90 93 ab 00 	sts	0x00AB, r25
     db8:	80 93 aa 00 	sts	0x00AA, r24
	}
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <USART_voidTXCallBackFunc>:

void USART_voidTXCallBackFunc(void (*PTR)(void))
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <USART_voidTXCallBackFunc+0x6>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
	if( PTR != NULL )
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	31 f0       	breq	.+12     	; 0xde8 <USART_voidTXCallBackFunc+0x22>
	{
		Private_voidTXFunc = PTR;
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	90 93 af 00 	sts	0x00AF, r25
     de4:	80 93 ae 00 	sts	0x00AE, r24
	}
}
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <USART_voidUDRCallBackFunc>:

void USART_voidUDRCallBackFunc(void (*PTR)(void) )
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <USART_voidUDRCallBackFunc+0x6>
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
	if( PTR != NULL )
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	31 f0       	breq	.+12     	; 0xe14 <USART_voidUDRCallBackFunc+0x22>
	{
		Private_voidUDRFunc = PTR;
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	9a 81       	ldd	r25, Y+2	; 0x02
     e0c:	90 93 ad 00 	sts	0x00AD, r25
     e10:	80 93 ac 00 	sts	0x00AC, r24
	}
}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <USART_voidRXEnableInterrupt>:

void USART_voidRXEnableInterrupt()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRB,UCSRB_RXCIE);
     e26:	aa e2       	ldi	r26, 0x2A	; 42
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ea e2       	ldi	r30, 0x2A	; 42
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	80 68       	ori	r24, 0x80	; 128
     e32:	8c 93       	st	X, r24
}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <USART_voidRXDisableInterrupt>:

void USART_voidRXDisableInterrupt()
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(UCSRB,UCSRB_RXCIE);
     e42:	aa e2       	ldi	r26, 0x2A	; 42
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ea e2       	ldi	r30, 0x2A	; 42
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	8c 93       	st	X, r24
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <USART_voidTXEnableInterrupt>:

void USART_voidTXEnableInterrupt()
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRB,UCSRB_TXCIE);
     e5e:	aa e2       	ldi	r26, 0x2A	; 42
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea e2       	ldi	r30, 0x2A	; 42
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	80 64       	ori	r24, 0x40	; 64
     e6a:	8c 93       	st	X, r24
}
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <USART_voidTXDisableInterrupt>:

void USART_voidTXDisableInterrupt()
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(UCSRB,UCSRB_TXCIE);
     e7a:	aa e2       	ldi	r26, 0x2A	; 42
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ea e2       	ldi	r30, 0x2A	; 42
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7b       	andi	r24, 0xBF	; 191
     e86:	8c 93       	st	X, r24
}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <USART_voidUDREnableInterrupt>:


void USART_voidUDREnableInterrupt()
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRB,UCSRB_UDRIE);
     e96:	aa e2       	ldi	r26, 0x2A	; 42
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	ea e2       	ldi	r30, 0x2A	; 42
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 62       	ori	r24, 0x20	; 32
     ea2:	8c 93       	st	X, r24
}
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <USART_voidUDRDisableInterrupt>:

void USART_voidUDRDisableInterrupt()
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(UCSRB,UCSRB_UDRIE);
     eb2:	aa e2       	ldi	r26, 0x2A	; 42
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ea e2       	ldi	r30, 0x2A	; 42
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8f 7d       	andi	r24, 0xDF	; 223
     ebe:	8c 93       	st	X, r24
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <__vector_13>:


void __vector_13(void)__attribute__((signal,used, externally_visible));
void __vector_13(void)
{
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidRXFunc != NULL )
     ef0:	80 91 aa 00 	lds	r24, 0x00AA
     ef4:	90 91 ab 00 	lds	r25, 0x00AB
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	29 f0       	breq	.+10     	; 0xf06 <__vector_13+0x40>
	{
		Private_voidRXFunc();
     efc:	e0 91 aa 00 	lds	r30, 0x00AA
     f00:	f0 91 ab 00 	lds	r31, 0x00AB
     f04:	09 95       	icall
	}
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	ff 91       	pop	r31
     f0c:	ef 91       	pop	r30
     f0e:	bf 91       	pop	r27
     f10:	af 91       	pop	r26
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	7f 91       	pop	r23
     f18:	6f 91       	pop	r22
     f1a:	5f 91       	pop	r21
     f1c:	4f 91       	pop	r20
     f1e:	3f 91       	pop	r19
     f20:	2f 91       	pop	r18
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <__vector_14>:

void __vector_14(void)__attribute__((signal,used, externally_visible));
void __vector_14(void)
{
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	2f 93       	push	r18
     f38:	3f 93       	push	r19
     f3a:	4f 93       	push	r20
     f3c:	5f 93       	push	r21
     f3e:	6f 93       	push	r22
     f40:	7f 93       	push	r23
     f42:	8f 93       	push	r24
     f44:	9f 93       	push	r25
     f46:	af 93       	push	r26
     f48:	bf 93       	push	r27
     f4a:	ef 93       	push	r30
     f4c:	ff 93       	push	r31
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidUDRFunc != NULL )
     f56:	80 91 ac 00 	lds	r24, 0x00AC
     f5a:	90 91 ad 00 	lds	r25, 0x00AD
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	29 f0       	breq	.+10     	; 0xf6c <__vector_14+0x40>
	{
		Private_voidUDRFunc();
     f62:	e0 91 ac 00 	lds	r30, 0x00AC
     f66:	f0 91 ad 00 	lds	r31, 0x00AD
     f6a:	09 95       	icall
	}
}
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f 90       	pop	r0
     f8e:	1f 90       	pop	r1
     f90:	18 95       	reti

00000f92 <__vector_15>:

void __vector_15(void) __attribute__((signal,used, externally_visible));
void __vector_15(void)
{
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidTXFunc != NULL )
     fbc:	80 91 ae 00 	lds	r24, 0x00AE
     fc0:	90 91 af 00 	lds	r25, 0x00AF
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	29 f0       	breq	.+10     	; 0xfd2 <__vector_15+0x40>
	{
		Private_voidTXFunc();
     fc8:	e0 91 ae 00 	lds	r30, 0x00AE
     fcc:	f0 91 af 00 	lds	r31, 0x00AF
     fd0:	09 95       	icall
	}
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti

00000ff8 <PORT_voidInit>:
#include "Port_Interface.h"
#include "Port_Register.h"


void PORT_voidInit(void)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR ;
    1000:	ea e3       	ldi	r30, 0x3A	; 58
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	80 83       	st	Z, r24
    DDRB = PORTB_DIR ;
    1008:	e7 e3       	ldi	r30, 0x37	; 55
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	80 83       	st	Z, r24
    DDRC = PORTC_DIR ;
    1010:	e4 e3       	ldi	r30, 0x34	; 52
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	80 83       	st	Z, r24
    DDRD = PORTD_DIR ;
    1018:	e1 e3       	ldi	r30, 0x31	; 49
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	8e ef       	ldi	r24, 0xFE	; 254
    101e:	80 83       	st	Z, r24

    PORTA = PORTA_INIT_VALUE;
    1020:	eb e3       	ldi	r30, 0x3B	; 59
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	10 82       	st	Z, r1
    PORTB = PORTB_INIT_VALUE;
    1026:	e8 e3       	ldi	r30, 0x38	; 56
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 e1       	ldi	r24, 0x10	; 16
    102c:	80 83       	st	Z, r24
    PORTC = PORTC_INIT_VALUE;
    102e:	e5 e3       	ldi	r30, 0x35	; 53
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	10 82       	st	Z, r1
    PORTD = PORTD_INIT_VALUE;
    1034:	e2 e3       	ldi	r30, 0x32	; 50
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	10 82       	st	Z, r1


}
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <GIE_voidEnable>:

#include "GIE_Register.h"
#include "GIE_Interface.h"

void GIE_voidEnable(void)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt  */
	Set_Bit(SREG, SREG_I);
    1048:	af e5       	ldi	r26, 0x5F	; 95
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	ef e5       	ldi	r30, 0x5F	; 95
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	80 68       	ori	r24, 0x80	; 128
    1054:	8c 93       	st	X, r24
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	/* Disable Global Interrupt  */
	Clear_Bit(SREG, SREG_I);
    1064:	af e5       	ldi	r26, 0x5F	; 95
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ef e5       	ldi	r30, 0x5F	; 95
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8f 77       	andi	r24, 0x7F	; 127
    1070:	8c 93       	st	X, r24
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <DIO_u8SetPinValue>:
}
*/

// Set "Pin" Value
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	00 d0       	rcall	.+0      	; 0x107e <DIO_u8SetPinValue+0x6>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <DIO_u8SetPinValue+0x8>
    1080:	00 d0       	rcall	.+0      	; 0x1082 <DIO_u8SetPinValue+0xa>
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	8a 83       	std	Y+2, r24	; 0x02
    1088:	6b 83       	std	Y+3, r22	; 0x03
    108a:	4c 83       	std	Y+4, r20	; 0x04
    u8 ERROR_FLAG = 0;
    108c:	19 82       	std	Y+1, r1	; 0x01

    switch (Copy_u8Port)
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	3e 83       	std	Y+6, r19	; 0x06
    1096:	2d 83       	std	Y+5, r18	; 0x05
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	9e 81       	ldd	r25, Y+6	; 0x06
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <DIO_u8SetPinValue+0x2c>
    10a2:	49 c0       	rjmp	.+146    	; 0x1136 <DIO_u8SetPinValue+0xbe>
    10a4:	2d 81       	ldd	r18, Y+5	; 0x05
    10a6:	3e 81       	ldd	r19, Y+6	; 0x06
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <DIO_u8SetPinValue+0x40>
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <DIO_u8SetPinValue+0x5a>
    10b6:	d4 c0       	rjmp	.+424    	; 0x1260 <DIO_u8SetPinValue+0x1e8>
    10b8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ba:	3e 81       	ldd	r19, Y+6	; 0x06
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <DIO_u8SetPinValue+0x4c>
    10c2:	6b c0       	rjmp	.+214    	; 0x119a <DIO_u8SetPinValue+0x122>
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	91 05       	cpc	r25, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <DIO_u8SetPinValue+0x58>
    10ce:	97 c0       	rjmp	.+302    	; 0x11fe <DIO_u8SetPinValue+0x186>
    10d0:	c7 c0       	rjmp	.+398    	; 0x1260 <DIO_u8SetPinValue+0x1e8>
    {
    case DIO_u8PORTA:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	a1 f4       	brne	.+40     	; 0x1100 <DIO_u8SetPinValue+0x88>
            Set_Bit(PORTA, Copy_u8Pin);
    10d8:	ab e3       	ldi	r26, 0x3B	; 59
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	eb e3       	ldi	r30, 0x3B	; 59
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_u8SetPinValue+0x7e>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_u8SetPinValue+0x7a>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	b0 c0       	rjmp	.+352    	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	88 23       	and	r24, r24
    1104:	a9 f4       	brne	.+42     	; 0x1130 <DIO_u8SetPinValue+0xb8>
            Clear_Bit(PORTA, Copy_u8Pin);
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_u8SetPinValue+0xac>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_u8SetPinValue+0xa8>
    1128:	80 95       	com	r24
    112a:	84 23       	and	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	98 c0       	rjmp	.+304    	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	95 c0       	rjmp	.+298    	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTB:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	a1 f4       	brne	.+40     	; 0x1164 <DIO_u8SetPinValue+0xec>
            Set_Bit(PORTB, Copy_u8Pin);
    113c:	a8 e3       	ldi	r26, 0x38	; 56
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e8 e3       	ldi	r30, 0x38	; 56
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_u8SetPinValue+0xe2>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_u8SetPinValue+0xde>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	7e c0       	rjmp	.+252    	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	88 23       	and	r24, r24
    1168:	a9 f4       	brne	.+42     	; 0x1194 <DIO_u8SetPinValue+0x11c>
            Clear_Bit(PORTB, Copy_u8Pin);
    116a:	a8 e3       	ldi	r26, 0x38	; 56
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e8 e3       	ldi	r30, 0x38	; 56
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8SetPinValue+0x110>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_u8SetPinValue+0x10c>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	66 c0       	rjmp	.+204    	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	63 c0       	rjmp	.+198    	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTC:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	a1 f4       	brne	.+40     	; 0x11c8 <DIO_u8SetPinValue+0x150>
            Set_Bit(PORTC, Copy_u8Pin);
    11a0:	a5 e3       	ldi	r26, 0x35	; 53
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e5 e3       	ldi	r30, 0x35	; 53
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_u8SetPinValue+0x146>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_u8SetPinValue+0x142>
    11c2:	84 2b       	or	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	4c c0       	rjmp	.+152    	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	88 23       	and	r24, r24
    11cc:	a9 f4       	brne	.+42     	; 0x11f8 <DIO_u8SetPinValue+0x180>
            Clear_Bit(PORTC, Copy_u8Pin);
    11ce:	a5 e3       	ldi	r26, 0x35	; 53
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e3       	ldi	r30, 0x35	; 53
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_u8SetPinValue+0x174>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_u8SetPinValue+0x170>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	34 c0       	rjmp	.+104    	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	31 c0       	rjmp	.+98     	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTD:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	a1 f4       	brne	.+40     	; 0x122c <DIO_u8SetPinValue+0x1b4>
            Set_Bit(PORTD, Copy_u8Pin);
    1204:	a2 e3       	ldi	r26, 0x32	; 50
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e2 e3       	ldi	r30, 0x32	; 50
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_u8SetPinValue+0x1aa>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_u8SetPinValue+0x1a6>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	1a c0       	rjmp	.+52     	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	88 23       	and	r24, r24
    1230:	a9 f4       	brne	.+42     	; 0x125c <DIO_u8SetPinValue+0x1e4>
            Clear_Bit(PORTD, Copy_u8Pin);
    1232:	a2 e3       	ldi	r26, 0x32	; 50
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e2 e3       	ldi	r30, 0x32	; 50
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_u8SetPinValue+0x1d8>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_u8SetPinValue+0x1d4>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	89 83       	std	Y+1, r24	; 0x01

    default:
        break;
    }

    return ERROR_FLAG;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
}
    1262:	26 96       	adiw	r28, 0x06	; 6
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <DIO_u8SetPortValue>:
    return Local_u8Error;
}*/

// Set "Port" Value
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	00 d0       	rcall	.+0      	; 0x127a <DIO_u8SetPortValue+0x6>
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_u8SetPortValue+0x8>
    127c:	0f 92       	push	r0
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	8a 83       	std	Y+2, r24	; 0x02
    1284:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Error = 0;
    1286:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8Port < 4)
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	84 30       	cpi	r24, 0x04	; 4
    128c:	98 f5       	brcc	.+102    	; 0x12f4 <DIO_u8SetPortValue+0x80>
    {
        switch (Copy_u8Port)
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	3d 83       	std	Y+5, r19	; 0x05
    1296:	2c 83       	std	Y+4, r18	; 0x04
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	9d 81       	ldd	r25, Y+5	; 0x05
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	91 05       	cpc	r25, r1
    12a0:	d1 f0       	breq	.+52     	; 0x12d6 <DIO_u8SetPortValue+0x62>
    12a2:	2c 81       	ldd	r18, Y+4	; 0x04
    12a4:	3d 81       	ldd	r19, Y+5	; 0x05
    12a6:	22 30       	cpi	r18, 0x02	; 2
    12a8:	31 05       	cpc	r19, r1
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <DIO_u8SetPortValue+0x42>
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	61 f0       	breq	.+24     	; 0x12cc <DIO_u8SetPortValue+0x58>
    12b4:	21 c0       	rjmp	.+66     	; 0x12f8 <DIO_u8SetPortValue+0x84>
    12b6:	2c 81       	ldd	r18, Y+4	; 0x04
    12b8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	81 f0       	breq	.+32     	; 0x12e0 <DIO_u8SetPortValue+0x6c>
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	9d 81       	ldd	r25, Y+5	; 0x05
    12c4:	83 30       	cpi	r24, 0x03	; 3
    12c6:	91 05       	cpc	r25, r1
    12c8:	81 f0       	breq	.+32     	; 0x12ea <DIO_u8SetPortValue+0x76>
    12ca:	16 c0       	rjmp	.+44     	; 0x12f8 <DIO_u8SetPortValue+0x84>
        {
        case DIO_u8PORTA:
            PORTA = Copy_u8Value;
    12cc:	eb e3       	ldi	r30, 0x3B	; 59
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	80 83       	st	Z, r24
    12d4:	11 c0       	rjmp	.+34     	; 0x12f8 <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTB:
            PORTB = Copy_u8Value;
    12d6:	e8 e3       	ldi	r30, 0x38	; 56
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	80 83       	st	Z, r24
    12de:	0c c0       	rjmp	.+24     	; 0x12f8 <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTC:
            PORTC = Copy_u8Value;
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	80 83       	st	Z, r24
    12e8:	07 c0       	rjmp	.+14     	; 0x12f8 <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTD:
            PORTD = Copy_u8Value;
    12ea:	e2 e3       	ldi	r30, 0x32	; 50
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	80 83       	st	Z, r24
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_u8SetPortValue+0x84>
            break;
        }
    }
    else
    {
        Local_u8Error = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8Error;
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <DIO_GetPinValue>:

// Get/Read "Pin" value
u8 DIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8Value)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	27 97       	sbiw	r28, 0x07	; 7
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	6a 83       	std	Y+2, r22	; 0x02
    1322:	5c 83       	std	Y+4, r21	; 0x04
    1324:	4b 83       	std	Y+3, r20	; 0x03

    switch (Copy_u8Port)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3f 83       	std	Y+7, r19	; 0x07
    132e:	2e 83       	std	Y+6, r18	; 0x06
    1330:	4e 81       	ldd	r20, Y+6	; 0x06
    1332:	5f 81       	ldd	r21, Y+7	; 0x07
    1334:	41 30       	cpi	r20, 0x01	; 1
    1336:	51 05       	cpc	r21, r1
    1338:	59 f1       	breq	.+86     	; 0x1390 <DIO_GetPinValue+0x86>
    133a:	8e 81       	ldd	r24, Y+6	; 0x06
    133c:	9f 81       	ldd	r25, Y+7	; 0x07
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	91 05       	cpc	r25, r1
    1342:	34 f4       	brge	.+12     	; 0x1350 <DIO_GetPinValue+0x46>
    1344:	2e 81       	ldd	r18, Y+6	; 0x06
    1346:	3f 81       	ldd	r19, Y+7	; 0x07
    1348:	21 15       	cp	r18, r1
    134a:	31 05       	cpc	r19, r1
    134c:	69 f0       	breq	.+26     	; 0x1368 <DIO_GetPinValue+0x5e>
    134e:	5c c0       	rjmp	.+184    	; 0x1408 <DIO_GetPinValue+0xfe>
    1350:	4e 81       	ldd	r20, Y+6	; 0x06
    1352:	5f 81       	ldd	r21, Y+7	; 0x07
    1354:	42 30       	cpi	r20, 0x02	; 2
    1356:	51 05       	cpc	r21, r1
    1358:	79 f1       	breq	.+94     	; 0x13b8 <DIO_GetPinValue+0xae>
    135a:	8e 81       	ldd	r24, Y+6	; 0x06
    135c:	9f 81       	ldd	r25, Y+7	; 0x07
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <DIO_GetPinValue+0x5c>
    1364:	3d c0       	rjmp	.+122    	; 0x13e0 <DIO_GetPinValue+0xd6>
    1366:	50 c0       	rjmp	.+160    	; 0x1408 <DIO_GetPinValue+0xfe>
    {
    case DIO_u8PORTA:
        *Copy_u8Value = Get_Bit(PINA, Copy_u8Pin);
    1368:	e9 e3       	ldi	r30, 0x39	; 57
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a9 01       	movw	r20, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_GetPinValue+0x76>
    137c:	55 95       	asr	r21
    137e:	47 95       	ror	r20
    1380:	8a 95       	dec	r24
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_GetPinValue+0x72>
    1384:	ca 01       	movw	r24, r20
    1386:	81 70       	andi	r24, 0x01	; 1
    1388:	eb 81       	ldd	r30, Y+3	; 0x03
    138a:	fc 81       	ldd	r31, Y+4	; 0x04
    138c:	80 83       	st	Z, r24
    138e:	3e c0       	rjmp	.+124    	; 0x140c <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTB:
        *Copy_u8Value = Get_Bit(PINB, Copy_u8Pin);
    1390:	e6 e3       	ldi	r30, 0x36	; 54
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a9 01       	movw	r20, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_GetPinValue+0x9e>
    13a4:	55 95       	asr	r21
    13a6:	47 95       	ror	r20
    13a8:	8a 95       	dec	r24
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_GetPinValue+0x9a>
    13ac:	ca 01       	movw	r24, r20
    13ae:	81 70       	andi	r24, 0x01	; 1
    13b0:	eb 81       	ldd	r30, Y+3	; 0x03
    13b2:	fc 81       	ldd	r31, Y+4	; 0x04
    13b4:	80 83       	st	Z, r24
    13b6:	2a c0       	rjmp	.+84     	; 0x140c <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTC:
        *Copy_u8Value = Get_Bit(PINC, Copy_u8Pin);
    13b8:	e3 e3       	ldi	r30, 0x33	; 51
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a9 01       	movw	r20, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_GetPinValue+0xc6>
    13cc:	55 95       	asr	r21
    13ce:	47 95       	ror	r20
    13d0:	8a 95       	dec	r24
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_GetPinValue+0xc2>
    13d4:	ca 01       	movw	r24, r20
    13d6:	81 70       	andi	r24, 0x01	; 1
    13d8:	eb 81       	ldd	r30, Y+3	; 0x03
    13da:	fc 81       	ldd	r31, Y+4	; 0x04
    13dc:	80 83       	st	Z, r24
    13de:	16 c0       	rjmp	.+44     	; 0x140c <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTD:
        *Copy_u8Value = Get_Bit(PIND, Copy_u8Pin);
    13e0:	e0 e3       	ldi	r30, 0x30	; 48
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a9 01       	movw	r20, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_GetPinValue+0xee>
    13f4:	55 95       	asr	r21
    13f6:	47 95       	ror	r20
    13f8:	8a 95       	dec	r24
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_GetPinValue+0xea>
    13fc:	ca 01       	movw	r24, r20
    13fe:	81 70       	andi	r24, 0x01	; 1
    1400:	eb 81       	ldd	r30, Y+3	; 0x03
    1402:	fc 81       	ldd	r31, Y+4	; 0x04
    1404:	80 83       	st	Z, r24
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_GetPinValue+0x102>
        break;

    default:
    	return NOK;
    1408:	1d 82       	std	Y+5, r1	; 0x05
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_GetPinValue+0x106>
        break;
    }

    return OK;
    140c:	51 e0       	ldi	r21, 0x01	; 1
    140e:	5d 83       	std	Y+5, r21	; 0x05
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1412:	27 96       	adiw	r28, 0x07	; 7
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue( u8 PORT_OUTPUT_VAL )
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	89 83       	std	Y+1, r24	; 0x01

#if SELECTED_PORT == PORT_u8_A
    PORTA = PORT_OUTPUT_VAL;
    1430:	eb e3       	ldi	r30, 0x3B	; 59
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	80 83       	st	Z, r24
    PORTD = PORT_OUTPUT_VAL;
#else

#endif

}
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <LCD_voidInit>:
#include "LCD_Private.h"

#include "avr/delay.h"


void LCD_voidInit(){
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	cc 58       	subi	r28, 0x8C	; 140
    144e:	d0 40       	sbci	r29, 0x00	; 0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	fe 01       	movw	r30, r28
    145c:	e7 57       	subi	r30, 0x77	; 119
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	ac e0       	ldi	r26, 0x0C	; 12
    1466:	b2 e4       	ldi	r27, 0x42	; 66
    1468:	80 83       	st	Z, r24
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	a2 83       	std	Z+2, r26	; 0x02
    146e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	8e 01       	movw	r16, r28
    1472:	0b 57       	subi	r16, 0x7B	; 123
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	fe 01       	movw	r30, r28
    1478:	e7 57       	subi	r30, 0x77	; 119
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a e7       	ldi	r20, 0x7A	; 122
    148a:	55 e4       	ldi	r21, 0x45	; 69
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	f8 01       	movw	r30, r16
    1496:	80 83       	st	Z, r24
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	a2 83       	std	Z+2, r26	; 0x02
    149c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    149e:	fe 01       	movw	r30, r28
    14a0:	eb 57       	subi	r30, 0x7B	; 123
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e8       	ldi	r20, 0x80	; 128
    14b2:	5f e3       	ldi	r21, 0x3F	; 63
    14b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b8:	88 23       	and	r24, r24
    14ba:	44 f4       	brge	.+16     	; 0x14cc <LCD_voidInit+0x8c>
		__ticks = 1;
    14bc:	fe 01       	movw	r30, r28
    14be:	ed 57       	subi	r30, 0x7D	; 125
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	80 83       	st	Z, r24
    14ca:	64 c0       	rjmp	.+200    	; 0x1594 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    14cc:	fe 01       	movw	r30, r28
    14ce:	eb 57       	subi	r30, 0x7B	; 123
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	60 81       	ld	r22, Z
    14d4:	71 81       	ldd	r23, Z+1	; 0x01
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	3f ef       	ldi	r19, 0xFF	; 255
    14de:	4f e7       	ldi	r20, 0x7F	; 127
    14e0:	57 e4       	ldi	r21, 0x47	; 71
    14e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e6:	18 16       	cp	r1, r24
    14e8:	0c f0       	brlt	.+2      	; 0x14ec <LCD_voidInit+0xac>
    14ea:	43 c0       	rjmp	.+134    	; 0x1572 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ec:	fe 01       	movw	r30, r28
    14ee:	e7 57       	subi	r30, 0x77	; 119
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e2       	ldi	r20, 0x20	; 32
    1500:	51 e4       	ldi	r21, 0x41	; 65
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	8e 01       	movw	r16, r28
    150c:	0d 57       	subi	r16, 0x7D	; 125
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	f8 01       	movw	r30, r16
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
    1522:	1f c0       	rjmp	.+62     	; 0x1562 <LCD_voidInit+0x122>
    1524:	fe 01       	movw	r30, r28
    1526:	ef 57       	subi	r30, 0x7F	; 127
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 e9       	ldi	r24, 0x90	; 144
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1532:	fe 01       	movw	r30, r28
    1534:	ef 57       	subi	r30, 0x7F	; 127
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_voidInit+0xfc>
    1540:	fe 01       	movw	r30, r28
    1542:	ef 57       	subi	r30, 0x7F	; 127
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	de 01       	movw	r26, r28
    154c:	ad 57       	subi	r26, 0x7D	; 125
    154e:	bf 4f       	sbci	r27, 0xFF	; 255
    1550:	fe 01       	movw	r30, r28
    1552:	ed 57       	subi	r30, 0x7D	; 125
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	91 81       	ldd	r25, Z+1	; 0x01
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	11 96       	adiw	r26, 0x01	; 1
    155e:	9c 93       	st	X, r25
    1560:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	fe 01       	movw	r30, r28
    1564:	ed 57       	subi	r30, 0x7D	; 125
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	80 81       	ld	r24, Z
    156a:	91 81       	ldd	r25, Z+1	; 0x01
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	d1 f6       	brne	.-76     	; 0x1524 <LCD_voidInit+0xe4>
    1570:	27 c0       	rjmp	.+78     	; 0x15c0 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1572:	8e 01       	movw	r16, r28
    1574:	0d 57       	subi	r16, 0x7D	; 125
    1576:	1f 4f       	sbci	r17, 0xFF	; 255
    1578:	fe 01       	movw	r30, r28
    157a:	eb 57       	subi	r30, 0x7B	; 123
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	f8 01       	movw	r30, r16
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24
    1594:	de 01       	movw	r26, r28
    1596:	a1 58       	subi	r26, 0x81	; 129
    1598:	bf 4f       	sbci	r27, 0xFF	; 255
    159a:	fe 01       	movw	r30, r28
    159c:	ed 57       	subi	r30, 0x7D	; 125
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	80 81       	ld	r24, Z
    15a2:	91 81       	ldd	r25, Z+1	; 0x01
    15a4:	8d 93       	st	X+, r24
    15a6:	9c 93       	st	X, r25
    15a8:	fe 01       	movw	r30, r28
    15aa:	e1 58       	subi	r30, 0x81	; 129
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	80 81       	ld	r24, Z
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <LCD_voidInit+0x172>
    15b6:	fe 01       	movw	r30, r28
    15b8:	e1 58       	subi	r30, 0x81	; 129
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    15c0:	80 e3       	ldi	r24, 0x30	; 48
    15c2:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_voidSendInitCommand>
    15c6:	fe 01       	movw	r30, r28
    15c8:	e5 58       	subi	r30, 0x85	; 133
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 ea       	ldi	r26, 0xA0	; 160
    15d2:	b0 e4       	ldi	r27, 0x40	; 64
    15d4:	80 83       	st	Z, r24
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	a2 83       	std	Z+2, r26	; 0x02
    15da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15dc:	8e 01       	movw	r16, r28
    15de:	09 58       	subi	r16, 0x89	; 137
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	fe 01       	movw	r30, r28
    15e4:	e5 58       	subi	r30, 0x85	; 133
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	4a e7       	ldi	r20, 0x7A	; 122
    15f6:	55 e4       	ldi	r21, 0x45	; 69
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	f8 01       	movw	r30, r16
    1602:	80 83       	st	Z, r24
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	a2 83       	std	Z+2, r26	; 0x02
    1608:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    160a:	fe 01       	movw	r30, r28
    160c:	e9 58       	subi	r30, 0x89	; 137
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	44 f4       	brge	.+16     	; 0x1638 <LCD_voidInit+0x1f8>
		__ticks = 1;
    1628:	fe 01       	movw	r30, r28
    162a:	eb 58       	subi	r30, 0x8B	; 139
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
    1636:	64 c0       	rjmp	.+200    	; 0x1700 <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    1638:	fe 01       	movw	r30, r28
    163a:	e9 58       	subi	r30, 0x89	; 137
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	60 81       	ld	r22, Z
    1640:	71 81       	ldd	r23, Z+1	; 0x01
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	3f ef       	ldi	r19, 0xFF	; 255
    164a:	4f e7       	ldi	r20, 0x7F	; 127
    164c:	57 e4       	ldi	r21, 0x47	; 71
    164e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1652:	18 16       	cp	r1, r24
    1654:	0c f0       	brlt	.+2      	; 0x1658 <LCD_voidInit+0x218>
    1656:	43 c0       	rjmp	.+134    	; 0x16de <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	fe 01       	movw	r30, r28
    165a:	e5 58       	subi	r30, 0x85	; 133
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e2       	ldi	r20, 0x20	; 32
    166c:	51 e4       	ldi	r21, 0x41	; 65
    166e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	8e 01       	movw	r16, r28
    1678:	0b 58       	subi	r16, 0x8B	; 139
    167a:	1f 4f       	sbci	r17, 0xFF	; 255
    167c:	bc 01       	movw	r22, r24
    167e:	cd 01       	movw	r24, r26
    1680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	f8 01       	movw	r30, r16
    168a:	91 83       	std	Z+1, r25	; 0x01
    168c:	80 83       	st	Z, r24
    168e:	1f c0       	rjmp	.+62     	; 0x16ce <LCD_voidInit+0x28e>
    1690:	fe 01       	movw	r30, r28
    1692:	ed 58       	subi	r30, 0x8D	; 141
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 e9       	ldi	r24, 0x90	; 144
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	80 83       	st	Z, r24
    169e:	fe 01       	movw	r30, r28
    16a0:	ed 58       	subi	r30, 0x8D	; 141
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <LCD_voidInit+0x268>
    16ac:	fe 01       	movw	r30, r28
    16ae:	ed 58       	subi	r30, 0x8D	; 141
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b6:	de 01       	movw	r26, r28
    16b8:	ab 58       	subi	r26, 0x8B	; 139
    16ba:	bf 4f       	sbci	r27, 0xFF	; 255
    16bc:	fe 01       	movw	r30, r28
    16be:	eb 58       	subi	r30, 0x8B	; 139
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	11 96       	adiw	r26, 0x01	; 1
    16ca:	9c 93       	st	X, r25
    16cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ce:	fe 01       	movw	r30, r28
    16d0:	eb 58       	subi	r30, 0x8B	; 139
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	d1 f6       	brne	.-76     	; 0x1690 <LCD_voidInit+0x250>
    16dc:	27 c0       	rjmp	.+78     	; 0x172c <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16de:	8e 01       	movw	r16, r28
    16e0:	0b 58       	subi	r16, 0x8B	; 139
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	fe 01       	movw	r30, r28
    16e6:	e9 58       	subi	r30, 0x89	; 137
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	f8 01       	movw	r30, r16
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
    1700:	de 01       	movw	r26, r28
    1702:	af 58       	subi	r26, 0x8F	; 143
    1704:	bf 4f       	sbci	r27, 0xFF	; 255
    1706:	fe 01       	movw	r30, r28
    1708:	eb 58       	subi	r30, 0x8B	; 139
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	8d 93       	st	X+, r24
    1712:	9c 93       	st	X, r25
    1714:	fe 01       	movw	r30, r28
    1716:	ef 58       	subi	r30, 0x8F	; 143
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <LCD_voidInit+0x2de>
    1722:	fe 01       	movw	r30, r28
    1724:	ef 58       	subi	r30, 0x8F	; 143
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    172c:	80 e3       	ldi	r24, 0x30	; 48
    172e:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_voidSendInitCommand>
    1732:	fe 01       	movw	r30, r28
    1734:	e3 59       	subi	r30, 0x93	; 147
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a0 e8       	ldi	r26, 0x80	; 128
    173e:	bf e3       	ldi	r27, 0x3F	; 63
    1740:	80 83       	st	Z, r24
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	a2 83       	std	Z+2, r26	; 0x02
    1746:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1748:	8e 01       	movw	r16, r28
    174a:	07 59       	subi	r16, 0x97	; 151
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	fe 01       	movw	r30, r28
    1750:	e3 59       	subi	r30, 0x93	; 147
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4a e7       	ldi	r20, 0x7A	; 122
    1762:	55 e4       	ldi	r21, 0x45	; 69
    1764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	f8 01       	movw	r30, r16
    176e:	80 83       	st	Z, r24
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	a2 83       	std	Z+2, r26	; 0x02
    1774:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1776:	fe 01       	movw	r30, r28
    1778:	e7 59       	subi	r30, 0x97	; 151
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e8       	ldi	r20, 0x80	; 128
    178a:	5f e3       	ldi	r21, 0x3F	; 63
    178c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1790:	88 23       	and	r24, r24
    1792:	44 f4       	brge	.+16     	; 0x17a4 <LCD_voidInit+0x364>
		__ticks = 1;
    1794:	fe 01       	movw	r30, r28
    1796:	e9 59       	subi	r30, 0x99	; 153
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	80 83       	st	Z, r24
    17a2:	64 c0       	rjmp	.+200    	; 0x186c <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    17a4:	fe 01       	movw	r30, r28
    17a6:	e7 59       	subi	r30, 0x97	; 151
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	3f ef       	ldi	r19, 0xFF	; 255
    17b6:	4f e7       	ldi	r20, 0x7F	; 127
    17b8:	57 e4       	ldi	r21, 0x47	; 71
    17ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17be:	18 16       	cp	r1, r24
    17c0:	0c f0       	brlt	.+2      	; 0x17c4 <LCD_voidInit+0x384>
    17c2:	43 c0       	rjmp	.+134    	; 0x184a <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c4:	fe 01       	movw	r30, r28
    17c6:	e3 59       	subi	r30, 0x93	; 147
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	8e 01       	movw	r16, r28
    17e4:	09 59       	subi	r16, 0x99	; 153
    17e6:	1f 4f       	sbci	r17, 0xFF	; 255
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	f8 01       	movw	r30, r16
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    17fa:	1f c0       	rjmp	.+62     	; 0x183a <LCD_voidInit+0x3fa>
    17fc:	fe 01       	movw	r30, r28
    17fe:	eb 59       	subi	r30, 0x9B	; 155
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	80 e9       	ldi	r24, 0x90	; 144
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
    180a:	fe 01       	movw	r30, r28
    180c:	eb 59       	subi	r30, 0x9B	; 155
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <LCD_voidInit+0x3d4>
    1818:	fe 01       	movw	r30, r28
    181a:	eb 59       	subi	r30, 0x9B	; 155
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1822:	de 01       	movw	r26, r28
    1824:	a9 59       	subi	r26, 0x99	; 153
    1826:	bf 4f       	sbci	r27, 0xFF	; 255
    1828:	fe 01       	movw	r30, r28
    182a:	e9 59       	subi	r30, 0x99	; 153
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 81       	ld	r24, Z
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	11 96       	adiw	r26, 0x01	; 1
    1836:	9c 93       	st	X, r25
    1838:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183a:	fe 01       	movw	r30, r28
    183c:	e9 59       	subi	r30, 0x99	; 153
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	d1 f6       	brne	.-76     	; 0x17fc <LCD_voidInit+0x3bc>
    1848:	27 c0       	rjmp	.+78     	; 0x1898 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	8e 01       	movw	r16, r28
    184c:	09 59       	subi	r16, 0x99	; 153
    184e:	1f 4f       	sbci	r17, 0xFF	; 255
    1850:	fe 01       	movw	r30, r28
    1852:	e7 59       	subi	r30, 0x97	; 151
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	f8 01       	movw	r30, r16
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	80 83       	st	Z, r24
    186c:	de 01       	movw	r26, r28
    186e:	ad 59       	subi	r26, 0x9D	; 157
    1870:	bf 4f       	sbci	r27, 0xFF	; 255
    1872:	fe 01       	movw	r30, r28
    1874:	e9 59       	subi	r30, 0x99	; 153
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	8d 93       	st	X+, r24
    187e:	9c 93       	st	X, r25
    1880:	fe 01       	movw	r30, r28
    1882:	ed 59       	subi	r30, 0x9D	; 157
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 81       	ld	r24, Z
    1888:	91 81       	ldd	r25, Z+1	; 0x01
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_voidInit+0x44a>
    188e:	fe 01       	movw	r30, r28
    1890:	ed 59       	subi	r30, 0x9D	; 157
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    1898:	80 e3       	ldi	r24, 0x30	; 48
    189a:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_voidSendInitCommand>
    189e:	fe 01       	movw	r30, r28
    18a0:	e1 5a       	subi	r30, 0xA1	; 161
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a0 e8       	ldi	r26, 0x80	; 128
    18aa:	bf e3       	ldi	r27, 0x3F	; 63
    18ac:	80 83       	st	Z, r24
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	a2 83       	std	Z+2, r26	; 0x02
    18b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b4:	8e 01       	movw	r16, r28
    18b6:	05 5a       	subi	r16, 0xA5	; 165
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ba:	fe 01       	movw	r30, r28
    18bc:	e1 5a       	subi	r30, 0xA1	; 161
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4a e7       	ldi	r20, 0x7A	; 122
    18ce:	55 e4       	ldi	r21, 0x45	; 69
    18d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	f8 01       	movw	r30, r16
    18da:	80 83       	st	Z, r24
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	a2 83       	std	Z+2, r26	; 0x02
    18e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e2:	fe 01       	movw	r30, r28
    18e4:	e5 5a       	subi	r30, 0xA5	; 165
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	44 f4       	brge	.+16     	; 0x1910 <LCD_voidInit+0x4d0>
		__ticks = 1;
    1900:	fe 01       	movw	r30, r28
    1902:	e7 5a       	subi	r30, 0xA7	; 167
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
    190e:	64 c0       	rjmp	.+200    	; 0x19d8 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    1910:	fe 01       	movw	r30, r28
    1912:	e5 5a       	subi	r30, 0xA5	; 165
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	0c f0       	brlt	.+2      	; 0x1930 <LCD_voidInit+0x4f0>
    192e:	43 c0       	rjmp	.+134    	; 0x19b6 <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	fe 01       	movw	r30, r28
    1932:	e1 5a       	subi	r30, 0xA1	; 161
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8e 01       	movw	r16, r28
    1950:	07 5a       	subi	r16, 0xA7	; 167
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	f8 01       	movw	r30, r16
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
    1966:	1f c0       	rjmp	.+62     	; 0x19a6 <LCD_voidInit+0x566>
    1968:	fe 01       	movw	r30, r28
    196a:	e9 5a       	subi	r30, 0xA9	; 169
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 e9       	ldi	r24, 0x90	; 144
    1970:	91 e0       	ldi	r25, 0x01	; 1
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	fe 01       	movw	r30, r28
    1978:	e9 5a       	subi	r30, 0xA9	; 169
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 81       	ld	r24, Z
    197e:	91 81       	ldd	r25, Z+1	; 0x01
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_voidInit+0x540>
    1984:	fe 01       	movw	r30, r28
    1986:	e9 5a       	subi	r30, 0xA9	; 169
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	de 01       	movw	r26, r28
    1990:	a7 5a       	subi	r26, 0xA7	; 167
    1992:	bf 4f       	sbci	r27, 0xFF	; 255
    1994:	fe 01       	movw	r30, r28
    1996:	e7 5a       	subi	r30, 0xA7	; 167
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	11 96       	adiw	r26, 0x01	; 1
    19a2:	9c 93       	st	X, r25
    19a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	fe 01       	movw	r30, r28
    19a8:	e7 5a       	subi	r30, 0xA7	; 167
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	d1 f6       	brne	.-76     	; 0x1968 <LCD_voidInit+0x528>
    19b4:	27 c0       	rjmp	.+78     	; 0x1a04 <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b6:	8e 01       	movw	r16, r28
    19b8:	07 5a       	subi	r16, 0xA7	; 167
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
    19bc:	fe 01       	movw	r30, r28
    19be:	e5 5a       	subi	r30, 0xA5	; 165
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	f8 01       	movw	r30, r16
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	80 83       	st	Z, r24
    19d8:	de 01       	movw	r26, r28
    19da:	ab 5a       	subi	r26, 0xAB	; 171
    19dc:	bf 4f       	sbci	r27, 0xFF	; 255
    19de:	fe 01       	movw	r30, r28
    19e0:	e7 5a       	subi	r30, 0xA7	; 167
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	8d 93       	st	X+, r24
    19ea:	9c 93       	st	X, r25
    19ec:	fe 01       	movw	r30, r28
    19ee:	eb 5a       	subi	r30, 0xAB	; 171
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	80 81       	ld	r24, Z
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_voidInit+0x5b6>
    19fa:	fe 01       	movw	r30, r28
    19fc:	eb 5a       	subi	r30, 0xAB	; 171
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    1a04:	80 e2       	ldi	r24, 0x20	; 32
    1a06:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_voidSendInitCommand>
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ef 5a       	subi	r30, 0xAF	; 175
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a0 e8       	ldi	r26, 0x80	; 128
    1a16:	bf e3       	ldi	r27, 0x3F	; 63
    1a18:	80 83       	st	Z, r24
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	a2 83       	std	Z+2, r26	; 0x02
    1a1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	8e 01       	movw	r16, r28
    1a22:	03 5b       	subi	r16, 0xB3	; 179
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	fe 01       	movw	r30, r28
    1a28:	ef 5a       	subi	r30, 0xAF	; 175
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	60 81       	ld	r22, Z
    1a2e:	71 81       	ldd	r23, Z+1	; 0x01
    1a30:	82 81       	ldd	r24, Z+2	; 0x02
    1a32:	93 81       	ldd	r25, Z+3	; 0x03
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4a e7       	ldi	r20, 0x7A	; 122
    1a3a:	55 e4       	ldi	r21, 0x45	; 69
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	f8 01       	movw	r30, r16
    1a46:	80 83       	st	Z, r24
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	a2 83       	std	Z+2, r26	; 0x02
    1a4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e3 5b       	subi	r30, 0xB3	; 179
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	60 81       	ld	r22, Z
    1a56:	71 81       	ldd	r23, Z+1	; 0x01
    1a58:	82 81       	ldd	r24, Z+2	; 0x02
    1a5a:	93 81       	ldd	r25, Z+3	; 0x03
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e8       	ldi	r20, 0x80	; 128
    1a62:	5f e3       	ldi	r21, 0x3F	; 63
    1a64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a68:	88 23       	and	r24, r24
    1a6a:	44 f4       	brge	.+16     	; 0x1a7c <LCD_voidInit+0x63c>
		__ticks = 1;
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e5 5b       	subi	r30, 0xB5	; 181
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
    1a7a:	64 c0       	rjmp	.+200    	; 0x1b44 <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e3 5b       	subi	r30, 0xB3	; 179
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	57 e4       	ldi	r21, 0x47	; 71
    1a92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	0c f0       	brlt	.+2      	; 0x1a9c <LCD_voidInit+0x65c>
    1a9a:	43 c0       	rjmp	.+134    	; 0x1b22 <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ef 5a       	subi	r30, 0xAF	; 175
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	60 81       	ld	r22, Z
    1aa4:	71 81       	ldd	r23, Z+1	; 0x01
    1aa6:	82 81       	ldd	r24, Z+2	; 0x02
    1aa8:	93 81       	ldd	r25, Z+3	; 0x03
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e2       	ldi	r20, 0x20	; 32
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8e 01       	movw	r16, r28
    1abc:	05 5b       	subi	r16, 0xB5	; 181
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	f8 01       	movw	r30, r16
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 83       	st	Z, r24
    1ad2:	1f c0       	rjmp	.+62     	; 0x1b12 <LCD_voidInit+0x6d2>
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e7 5b       	subi	r30, 0xB7	; 183
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 e9       	ldi	r24, 0x90	; 144
    1adc:	91 e0       	ldi	r25, 0x01	; 1
    1ade:	91 83       	std	Z+1, r25	; 0x01
    1ae0:	80 83       	st	Z, r24
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e7 5b       	subi	r30, 0xB7	; 183
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <LCD_voidInit+0x6ac>
    1af0:	fe 01       	movw	r30, r28
    1af2:	e7 5b       	subi	r30, 0xB7	; 183
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	de 01       	movw	r26, r28
    1afc:	a5 5b       	subi	r26, 0xB5	; 181
    1afe:	bf 4f       	sbci	r27, 0xFF	; 255
    1b00:	fe 01       	movw	r30, r28
    1b02:	e5 5b       	subi	r30, 0xB5	; 181
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	11 96       	adiw	r26, 0x01	; 1
    1b0e:	9c 93       	st	X, r25
    1b10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b12:	fe 01       	movw	r30, r28
    1b14:	e5 5b       	subi	r30, 0xB5	; 181
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	d1 f6       	brne	.-76     	; 0x1ad4 <LCD_voidInit+0x694>
    1b20:	27 c0       	rjmp	.+78     	; 0x1b70 <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	8e 01       	movw	r16, r28
    1b24:	05 5b       	subi	r16, 0xB5	; 181
    1b26:	1f 4f       	sbci	r17, 0xFF	; 255
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e3 5b       	subi	r30, 0xB3	; 179
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	f8 01       	movw	r30, r16
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
    1b44:	de 01       	movw	r26, r28
    1b46:	a9 5b       	subi	r26, 0xB9	; 185
    1b48:	bf 4f       	sbci	r27, 0xFF	; 255
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e5 5b       	subi	r30, 0xB5	; 181
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	8d 93       	st	X+, r24
    1b56:	9c 93       	st	X, r25
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e9 5b       	subi	r30, 0xB9	; 185
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <LCD_voidInit+0x722>
    1b66:	fe 01       	movw	r30, r28
    1b68:	e9 5b       	subi	r30, 0xB9	; 185
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    1b70:	88 e2       	ldi	r24, 0x28	; 40
    1b72:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_voidSendCommand>
    1b76:	fe 01       	movw	r30, r28
    1b78:	ed 5b       	subi	r30, 0xBD	; 189
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 e8       	ldi	r26, 0x80	; 128
    1b82:	bf e3       	ldi	r27, 0x3F	; 63
    1b84:	80 83       	st	Z, r24
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	a2 83       	std	Z+2, r26	; 0x02
    1b8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8c:	8e 01       	movw	r16, r28
    1b8e:	01 5c       	subi	r16, 0xC1	; 193
    1b90:	1f 4f       	sbci	r17, 0xFF	; 255
    1b92:	fe 01       	movw	r30, r28
    1b94:	ed 5b       	subi	r30, 0xBD	; 189
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4a e7       	ldi	r20, 0x7A	; 122
    1ba6:	55 e4       	ldi	r21, 0x45	; 69
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	80 83       	st	Z, r24
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	a2 83       	std	Z+2, r26	; 0x02
    1bb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bba:	fe 01       	movw	r30, r28
    1bbc:	ff 96       	adiw	r30, 0x3f	; 63
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	2c f4       	brge	.+10     	; 0x1be0 <LCD_voidInit+0x7a0>
		__ticks = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9e af       	std	Y+62, r25	; 0x3e
    1bdc:	8d af       	std	Y+61, r24	; 0x3d
    1bde:	46 c0       	rjmp	.+140    	; 0x1c6c <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    1be0:	fe 01       	movw	r30, r28
    1be2:	ff 96       	adiw	r30, 0x3f	; 63
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	3f ef       	ldi	r19, 0xFF	; 255
    1bf0:	4f e7       	ldi	r20, 0x7F	; 127
    1bf2:	57 e4       	ldi	r21, 0x47	; 71
    1bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf8:	18 16       	cp	r1, r24
    1bfa:	64 f5       	brge	.+88     	; 0x1c54 <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	ed 5b       	subi	r30, 0xBD	; 189
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	60 81       	ld	r22, Z
    1c04:	71 81       	ldd	r23, Z+1	; 0x01
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e2       	ldi	r20, 0x20	; 32
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9e af       	std	Y+62, r25	; 0x3e
    1c28:	8d af       	std	Y+61, r24	; 0x3d
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <LCD_voidInit+0x80a>
    1c2c:	80 e9       	ldi	r24, 0x90	; 144
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	9c af       	std	Y+60, r25	; 0x3c
    1c32:	8b af       	std	Y+59, r24	; 0x3b
    1c34:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c36:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LCD_voidInit+0x7f8>
    1c3c:	9c af       	std	Y+60, r25	; 0x3c
    1c3e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	9e af       	std	Y+62, r25	; 0x3e
    1c48:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	69 f7       	brne	.-38     	; 0x1c2c <LCD_voidInit+0x7ec>
    1c52:	16 c0       	rjmp	.+44     	; 0x1c80 <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c54:	fe 01       	movw	r30, r28
    1c56:	ff 96       	adiw	r30, 0x3f	; 63
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e af       	std	Y+62, r25	; 0x3e
    1c6a:	8d af       	std	Y+61, r24	; 0x3d
    1c6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c70:	9a af       	std	Y+58, r25	; 0x3a
    1c72:	89 af       	std	Y+57, r24	; 0x39
    1c74:	89 ad       	ldd	r24, Y+57	; 0x39
    1c76:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_voidInit+0x838>
    1c7c:	9a af       	std	Y+58, r25	; 0x3a
    1c7e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    1c80:	88 e0       	ldi	r24, 0x08	; 8
    1c82:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_voidSendCommand>
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	a0 e8       	ldi	r26, 0x80	; 128
    1c8c:	bf e3       	ldi	r27, 0x3F	; 63
    1c8e:	8d ab       	std	Y+53, r24	; 0x35
    1c90:	9e ab       	std	Y+54, r25	; 0x36
    1c92:	af ab       	std	Y+55, r26	; 0x37
    1c94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c96:	6d a9       	ldd	r22, Y+53	; 0x35
    1c98:	7e a9       	ldd	r23, Y+54	; 0x36
    1c9a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c9c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	4a e7       	ldi	r20, 0x7A	; 122
    1ca4:	55 e4       	ldi	r21, 0x45	; 69
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	89 ab       	std	Y+49, r24	; 0x31
    1cb0:	9a ab       	std	Y+50, r25	; 0x32
    1cb2:	ab ab       	std	Y+51, r26	; 0x33
    1cb4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cba:	8b a9       	ldd	r24, Y+51	; 0x33
    1cbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e8       	ldi	r20, 0x80	; 128
    1cc4:	5f e3       	ldi	r21, 0x3F	; 63
    1cc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cca:	88 23       	and	r24, r24
    1ccc:	2c f4       	brge	.+10     	; 0x1cd8 <LCD_voidInit+0x898>
		__ticks = 1;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	98 ab       	std	Y+48, r25	; 0x30
    1cd4:	8f a7       	std	Y+47, r24	; 0x2f
    1cd6:	3f c0       	rjmp	.+126    	; 0x1d56 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    1cd8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cda:	7a a9       	ldd	r23, Y+50	; 0x32
    1cdc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cde:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	3f ef       	ldi	r19, 0xFF	; 255
    1ce4:	4f e7       	ldi	r20, 0x7F	; 127
    1ce6:	57 e4       	ldi	r21, 0x47	; 71
    1ce8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cec:	18 16       	cp	r1, r24
    1cee:	4c f5       	brge	.+82     	; 0x1d42 <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf0:	6d a9       	ldd	r22, Y+53	; 0x35
    1cf2:	7e a9       	ldd	r23, Y+54	; 0x36
    1cf4:	8f a9       	ldd	r24, Y+55	; 0x37
    1cf6:	98 ad       	ldd	r25, Y+56	; 0x38
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e2       	ldi	r20, 0x20	; 32
    1cfe:	51 e4       	ldi	r21, 0x41	; 65
    1d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	98 ab       	std	Y+48, r25	; 0x30
    1d16:	8f a7       	std	Y+47, r24	; 0x2f
    1d18:	0f c0       	rjmp	.+30     	; 0x1d38 <LCD_voidInit+0x8f8>
    1d1a:	80 e9       	ldi	r24, 0x90	; 144
    1d1c:	91 e0       	ldi	r25, 0x01	; 1
    1d1e:	9e a7       	std	Y+46, r25	; 0x2e
    1d20:	8d a7       	std	Y+45, r24	; 0x2d
    1d22:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d24:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_voidInit+0x8e6>
    1d2a:	9e a7       	std	Y+46, r25	; 0x2e
    1d2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d30:	98 a9       	ldd	r25, Y+48	; 0x30
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	98 ab       	std	Y+48, r25	; 0x30
    1d36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	69 f7       	brne	.-38     	; 0x1d1a <LCD_voidInit+0x8da>
    1d40:	14 c0       	rjmp	.+40     	; 0x1d6a <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d42:	69 a9       	ldd	r22, Y+49	; 0x31
    1d44:	7a a9       	ldd	r23, Y+50	; 0x32
    1d46:	8b a9       	ldd	r24, Y+51	; 0x33
    1d48:	9c a9       	ldd	r25, Y+52	; 0x34
    1d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	98 ab       	std	Y+48, r25	; 0x30
    1d54:	8f a7       	std	Y+47, r24	; 0x2f
    1d56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d58:	98 a9       	ldd	r25, Y+48	; 0x30
    1d5a:	9c a7       	std	Y+44, r25	; 0x2c
    1d5c:	8b a7       	std	Y+43, r24	; 0x2b
    1d5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d60:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_voidInit+0x922>
    1d66:	9c a7       	std	Y+44, r25	; 0x2c
    1d68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_voidSendCommand>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a0 ea       	ldi	r26, 0xA0	; 160
    1d76:	b0 e4       	ldi	r27, 0x40	; 64
    1d78:	8f a3       	std	Y+39, r24	; 0x27
    1d7a:	98 a7       	std	Y+40, r25	; 0x28
    1d7c:	a9 a7       	std	Y+41, r26	; 0x29
    1d7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6f a1       	ldd	r22, Y+39	; 0x27
    1d82:	78 a5       	ldd	r23, Y+40	; 0x28
    1d84:	89 a5       	ldd	r24, Y+41	; 0x29
    1d86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a e7       	ldi	r20, 0x7A	; 122
    1d8e:	55 e4       	ldi	r21, 0x45	; 69
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8b a3       	std	Y+35, r24	; 0x23
    1d9a:	9c a3       	std	Y+36, r25	; 0x24
    1d9c:	ad a3       	std	Y+37, r26	; 0x25
    1d9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1da0:	6b a1       	ldd	r22, Y+35	; 0x23
    1da2:	7c a1       	ldd	r23, Y+36	; 0x24
    1da4:	8d a1       	ldd	r24, Y+37	; 0x25
    1da6:	9e a1       	ldd	r25, Y+38	; 0x26
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <LCD_voidInit+0x982>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9a a3       	std	Y+34, r25	; 0x22
    1dbe:	89 a3       	std	Y+33, r24	; 0x21
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    1dc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6f a1       	ldd	r22, Y+39	; 0x27
    1ddc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dde:	89 a5       	ldd	r24, Y+41	; 0x29
    1de0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9a a3       	std	Y+34, r25	; 0x22
    1e00:	89 a3       	std	Y+33, r24	; 0x21
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <LCD_voidInit+0x9e2>
    1e04:	80 e9       	ldi	r24, 0x90	; 144
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	98 a3       	std	Y+32, r25	; 0x20
    1e0a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e0e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_voidInit+0x9d0>
    1e14:	98 a3       	std	Y+32, r25	; 0x20
    1e16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	9a a3       	std	Y+34, r25	; 0x22
    1e20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	89 a1       	ldd	r24, Y+33	; 0x21
    1e24:	9a a1       	ldd	r25, Y+34	; 0x22
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <LCD_voidInit+0x9c4>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e30:	8d a1       	ldd	r24, Y+37	; 0x25
    1e32:	9e a1       	ldd	r25, Y+38	; 0x26
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9a a3       	std	Y+34, r25	; 0x22
    1e3e:	89 a3       	std	Y+33, r24	; 0x21
    1e40:	89 a1       	ldd	r24, Y+33	; 0x21
    1e42:	9a a1       	ldd	r25, Y+34	; 0x22
    1e44:	9e 8f       	std	Y+30, r25	; 0x1e
    1e46:	8d 8f       	std	Y+29, r24	; 0x1d
    1e48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_voidInit+0xa0c>
    1e50:	9e 8f       	std	Y+30, r25	; 0x1e
    1e52:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    1e54:	8c e0       	ldi	r24, 0x0C	; 12
    1e56:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_voidSendCommand>
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a0 e8       	ldi	r26, 0x80	; 128
    1e60:	bf e3       	ldi	r27, 0x3F	; 63
    1e62:	89 8f       	std	Y+25, r24	; 0x19
    1e64:	9a 8f       	std	Y+26, r25	; 0x1a
    1e66:	ab 8f       	std	Y+27, r26	; 0x1b
    1e68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	4a e7       	ldi	r20, 0x7A	; 122
    1e78:	55 e4       	ldi	r21, 0x45	; 69
    1e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	8d 8b       	std	Y+21, r24	; 0x15
    1e84:	9e 8b       	std	Y+22, r25	; 0x16
    1e86:	af 8b       	std	Y+23, r26	; 0x17
    1e88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e90:	98 8d       	ldd	r25, Y+24	; 0x18
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e8       	ldi	r20, 0x80	; 128
    1e98:	5f e3       	ldi	r21, 0x3F	; 63
    1e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9e:	88 23       	and	r24, r24
    1ea0:	2c f4       	brge	.+10     	; 0x1eac <LCD_voidInit+0xa6c>
		__ticks = 1;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9c 8b       	std	Y+20, r25	; 0x14
    1ea8:	8b 8b       	std	Y+19, r24	; 0x13
    1eaa:	3f c0       	rjmp	.+126    	; 0x1f2a <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    1eac:	6d 89       	ldd	r22, Y+21	; 0x15
    1eae:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	3f ef       	ldi	r19, 0xFF	; 255
    1eb8:	4f e7       	ldi	r20, 0x7F	; 127
    1eba:	57 e4       	ldi	r21, 0x47	; 71
    1ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec0:	18 16       	cp	r1, r24
    1ec2:	4c f5       	brge	.+82     	; 0x1f16 <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e2       	ldi	r20, 0x20	; 32
    1ed2:	51 e4       	ldi	r21, 0x41	; 65
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9c 8b       	std	Y+20, r25	; 0x14
    1eea:	8b 8b       	std	Y+19, r24	; 0x13
    1eec:	0f c0       	rjmp	.+30     	; 0x1f0c <LCD_voidInit+0xacc>
    1eee:	80 e9       	ldi	r24, 0x90	; 144
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	9a 8b       	std	Y+18, r25	; 0x12
    1ef4:	89 8b       	std	Y+17, r24	; 0x11
    1ef6:	89 89       	ldd	r24, Y+17	; 0x11
    1ef8:	9a 89       	ldd	r25, Y+18	; 0x12
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <LCD_voidInit+0xaba>
    1efe:	9a 8b       	std	Y+18, r25	; 0x12
    1f00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f02:	8b 89       	ldd	r24, Y+19	; 0x13
    1f04:	9c 89       	ldd	r25, Y+20	; 0x14
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	9c 8b       	std	Y+20, r25	; 0x14
    1f0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	69 f7       	brne	.-38     	; 0x1eee <LCD_voidInit+0xaae>
    1f14:	14 c0       	rjmp	.+40     	; 0x1f3e <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f16:	6d 89       	ldd	r22, Y+21	; 0x15
    1f18:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9c 8b       	std	Y+20, r25	; 0x14
    1f28:	8b 8b       	std	Y+19, r24	; 0x13
    1f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2e:	98 8b       	std	Y+16, r25	; 0x10
    1f30:	8f 87       	std	Y+15, r24	; 0x0f
    1f32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f34:	98 89       	ldd	r25, Y+16	; 0x10
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <LCD_voidInit+0xaf6>
    1f3a:	98 8b       	std	Y+16, r25	; 0x10
    1f3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    1f3e:	86 e0       	ldi	r24, 0x06	; 6
    1f40:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_voidSendCommand>
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e8       	ldi	r26, 0x80	; 128
    1f4a:	bf e3       	ldi	r27, 0x3F	; 63
    1f4c:	8b 87       	std	Y+11, r24	; 0x0b
    1f4e:	9c 87       	std	Y+12, r25	; 0x0c
    1f50:	ad 87       	std	Y+13, r26	; 0x0d
    1f52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a e7       	ldi	r20, 0x7A	; 122
    1f62:	55 e4       	ldi	r21, 0x45	; 69
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	8f 83       	std	Y+7, r24	; 0x07
    1f6e:	98 87       	std	Y+8, r25	; 0x08
    1f70:	a9 87       	std	Y+9, r26	; 0x09
    1f72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f74:	6f 81       	ldd	r22, Y+7	; 0x07
    1f76:	78 85       	ldd	r23, Y+8	; 0x08
    1f78:	89 85       	ldd	r24, Y+9	; 0x09
    1f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <LCD_voidInit+0xb56>
		__ticks = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
    1f94:	3f c0       	rjmp	.+126    	; 0x2014 <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	4c f5       	brge	.+82     	; 0x2000 <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <LCD_voidInit+0xbb6>
    1fd8:	80 e9       	ldi	r24, 0x90	; 144
    1fda:	91 e0       	ldi	r25, 0x01	; 1
    1fdc:	9c 83       	std	Y+4, r25	; 0x04
    1fde:	8b 83       	std	Y+3, r24	; 0x03
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_voidInit+0xba4>
    1fe8:	9c 83       	std	Y+4, r25	; 0x04
    1fea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	9e 83       	std	Y+6, r25	; 0x06
    1ff4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <LCD_voidInit+0xb98>
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2000:	6f 81       	ldd	r22, Y+7	; 0x07
    2002:	78 85       	ldd	r23, Y+8	; 0x08
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	9a 81       	ldd	r25, Y+2	; 0x02
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <LCD_voidInit+0xbe0>
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2028:	c4 57       	subi	r28, 0x74	; 116
    202a:	df 4f       	sbci	r29, 0xFF	; 255
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	08 95       	ret

00002040 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	2f 97       	sbiw	r28, 0x0f	; 15
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	63 e0       	ldi	r22, 0x03	; 3
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	62 e0       	ldi	r22, 0x02	; 2
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(command, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(command, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(command, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(command, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    206a:	8f 85       	ldd	r24, Y+15	; 0x0f
    206c:	82 95       	swap	r24
    206e:	8f 70       	andi	r24, 0x0F	; 15
    2070:	98 2f       	mov	r25, r24
    2072:	91 70       	andi	r25, 0x01	; 1
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	49 2f       	mov	r20, r25
    207a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    207e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2080:	82 95       	swap	r24
    2082:	86 95       	lsr	r24
    2084:	87 70       	andi	r24, 0x07	; 7
    2086:	98 2f       	mov	r25, r24
    2088:	91 70       	andi	r25, 0x01	; 1
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	61 e0       	ldi	r22, 0x01	; 1
    208e:	49 2f       	mov	r20, r25
    2090:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    2094:	8f 85       	ldd	r24, Y+15	; 0x0f
    2096:	82 95       	swap	r24
    2098:	86 95       	lsr	r24
    209a:	86 95       	lsr	r24
    209c:	83 70       	andi	r24, 0x03	; 3
    209e:	98 2f       	mov	r25, r24
    20a0:	91 70       	andi	r25, 0x01	; 1
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	62 e0       	ldi	r22, 0x02	; 2
    20a6:	49 2f       	mov	r20, r25
    20a8:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    20ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ae:	98 2f       	mov	r25, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	99 27       	eor	r25, r25
    20b4:	99 1f       	adc	r25, r25
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	64 e0       	ldi	r22, 0x04	; 4
    20ba:	49 2f       	mov	r20, r25
    20bc:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	62 e0       	ldi	r22, 0x02	; 2
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	62 e0       	ldi	r22, 0x02	; 2
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 0));
    20d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d6:	98 2f       	mov	r25, r24
    20d8:	91 70       	andi	r25, 0x01	; 1
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	49 2f       	mov	r20, r25
    20e0:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 1));
    20e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e6:	86 95       	lsr	r24
    20e8:	98 2f       	mov	r25, r24
    20ea:	91 70       	andi	r25, 0x01	; 1
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	61 e0       	ldi	r22, 0x01	; 1
    20f0:	49 2f       	mov	r20, r25
    20f2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 2));
    20f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f8:	86 95       	lsr	r24
    20fa:	86 95       	lsr	r24
    20fc:	98 2f       	mov	r25, r24
    20fe:	91 70       	andi	r25, 0x01	; 1
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	62 e0       	ldi	r22, 0x02	; 2
    2104:	49 2f       	mov	r20, r25
    2106:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 3));
    210a:	8f 85       	ldd	r24, Y+15	; 0x0f
    210c:	86 95       	lsr	r24
    210e:	86 95       	lsr	r24
    2110:	86 95       	lsr	r24
    2112:	98 2f       	mov	r25, r24
    2114:	91 70       	andi	r25, 0x01	; 1
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	64 e0       	ldi	r22, 0x04	; 4
    211a:	49 2f       	mov	r20, r25
    211c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	62 e0       	ldi	r22, 0x02	; 2
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 ea       	ldi	r26, 0xA0	; 160
    2130:	b0 e4       	ldi	r27, 0x40	; 64
    2132:	8b 87       	std	Y+11, r24	; 0x0b
    2134:	9c 87       	std	Y+12, r25	; 0x0c
    2136:	ad 87       	std	Y+13, r26	; 0x0d
    2138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	6b 85       	ldd	r22, Y+11	; 0x0b
    213c:	7c 85       	ldd	r23, Y+12	; 0x0c
    213e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2140:	9e 85       	ldd	r25, Y+14	; 0x0e
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	55 e4       	ldi	r21, 0x45	; 69
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8f 83       	std	Y+7, r24	; 0x07
    2154:	98 87       	std	Y+8, r25	; 0x08
    2156:	a9 87       	std	Y+9, r26	; 0x09
    2158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215a:	6f 81       	ldd	r22, Y+7	; 0x07
    215c:	78 85       	ldd	r23, Y+8	; 0x08
    215e:	89 85       	ldd	r24, Y+9	; 0x09
    2160:	9a 85       	ldd	r25, Y+10	; 0x0a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <LCD_voidSendCommand+0x19c>
    21be:	80 e9       	ldi	r24, 0x90	; 144
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	9c 83       	std	Y+4, r25	; 0x04
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_voidSendCommand+0x18a>
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <LCD_voidSendCommand+0x17e>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <LCD_voidSendCommand+0x1c6>
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    220e:	2f 96       	adiw	r28, 0x0f	; 15
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	2f 97       	sbiw	r28, 0x0f	; 15
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	63 e0       	ldi	r22, 0x03	; 3
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	62 e0       	ldi	r22, 0x02	; 2
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    224a:	8f 85       	ldd	r24, Y+15	; 0x0f
    224c:	82 95       	swap	r24
    224e:	8f 70       	andi	r24, 0x0F	; 15
    2250:	98 2f       	mov	r25, r24
    2252:	91 70       	andi	r25, 0x01	; 1
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	49 2f       	mov	r20, r25
    225a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    225e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2260:	82 95       	swap	r24
    2262:	86 95       	lsr	r24
    2264:	87 70       	andi	r24, 0x07	; 7
    2266:	98 2f       	mov	r25, r24
    2268:	91 70       	andi	r25, 0x01	; 1
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	61 e0       	ldi	r22, 0x01	; 1
    226e:	49 2f       	mov	r20, r25
    2270:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    2274:	8f 85       	ldd	r24, Y+15	; 0x0f
    2276:	82 95       	swap	r24
    2278:	86 95       	lsr	r24
    227a:	86 95       	lsr	r24
    227c:	83 70       	andi	r24, 0x03	; 3
    227e:	98 2f       	mov	r25, r24
    2280:	91 70       	andi	r25, 0x01	; 1
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	62 e0       	ldi	r22, 0x02	; 2
    2286:	49 2f       	mov	r20, r25
    2288:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    228c:	8f 85       	ldd	r24, Y+15	; 0x0f
    228e:	98 2f       	mov	r25, r24
    2290:	99 1f       	adc	r25, r25
    2292:	99 27       	eor	r25, r25
    2294:	99 1f       	adc	r25, r25
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	64 e0       	ldi	r22, 0x04	; 4
    229a:	49 2f       	mov	r20, r25
    229c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	62 e0       	ldi	r22, 0x02	; 2
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 ea       	ldi	r26, 0xA0	; 160
    22b0:	b0 e4       	ldi	r27, 0x40	; 64
    22b2:	8b 87       	std	Y+11, r24	; 0x0b
    22b4:	9c 87       	std	Y+12, r25	; 0x0c
    22b6:	ad 87       	std	Y+13, r26	; 0x0d
    22b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    22bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22be:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a e7       	ldi	r20, 0x7A	; 122
    22c8:	55 e4       	ldi	r21, 0x45	; 69
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	8f 83       	std	Y+7, r24	; 0x07
    22d4:	98 87       	std	Y+8, r25	; 0x08
    22d6:	a9 87       	std	Y+9, r26	; 0x09
    22d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e8       	ldi	r20, 0x80	; 128
    22e8:	5f e3       	ldi	r21, 0x3F	; 63
    22ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ee:	88 23       	and	r24, r24
    22f0:	2c f4       	brge	.+10     	; 0x22fc <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9e 83       	std	Y+6, r25	; 0x06
    22f8:	8d 83       	std	Y+5, r24	; 0x05
    22fa:	3f c0       	rjmp	.+126    	; 0x237a <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	3f ef       	ldi	r19, 0xFF	; 255
    2308:	4f e7       	ldi	r20, 0x7F	; 127
    230a:	57 e4       	ldi	r21, 0x47	; 71
    230c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2310:	18 16       	cp	r1, r24
    2312:	4c f5       	brge	.+82     	; 0x2366 <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2314:	6b 85       	ldd	r22, Y+11	; 0x0b
    2316:	7c 85       	ldd	r23, Y+12	; 0x0c
    2318:	8d 85       	ldd	r24, Y+13	; 0x0d
    231a:	9e 85       	ldd	r25, Y+14	; 0x0e
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e2       	ldi	r20, 0x20	; 32
    2322:	51 e4       	ldi	r21, 0x41	; 65
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	0f c0       	rjmp	.+30     	; 0x235c <LCD_voidSendInitCommand+0x13c>
    233e:	80 e9       	ldi	r24, 0x90	; 144
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	9c 83       	std	Y+4, r25	; 0x04
    2344:	8b 83       	std	Y+3, r24	; 0x03
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <LCD_voidSendInitCommand+0x12a>
    234e:	9c 83       	std	Y+4, r25	; 0x04
    2350:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	69 f7       	brne	.-38     	; 0x233e <LCD_voidSendInitCommand+0x11e>
    2364:	14 c0       	rjmp	.+40     	; 0x238e <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2366:	6f 81       	ldd	r22, Y+7	; 0x07
    2368:	78 85       	ldd	r23, Y+8	; 0x08
    236a:	89 85       	ldd	r24, Y+9	; 0x09
    236c:	9a 85       	ldd	r25, Y+10	; 0x0a
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <LCD_voidSendInitCommand+0x166>
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    238e:	2f 96       	adiw	r28, 0x0f	; 15
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	2f 97       	sbiw	r28, 0x0f	; 15
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_HIGH); //RS = 0
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	63 e0       	ldi	r22, 0x03	; 3
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	62 e0       	ldi	r22, 0x02	; 2
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(data, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(data, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(data, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(data, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 4));
    23ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    23cc:	82 95       	swap	r24
    23ce:	8f 70       	andi	r24, 0x0F	; 15
    23d0:	98 2f       	mov	r25, r24
    23d2:	91 70       	andi	r25, 0x01	; 1
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	49 2f       	mov	r20, r25
    23da:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 5));
    23de:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e0:	82 95       	swap	r24
    23e2:	86 95       	lsr	r24
    23e4:	87 70       	andi	r24, 0x07	; 7
    23e6:	98 2f       	mov	r25, r24
    23e8:	91 70       	andi	r25, 0x01	; 1
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	61 e0       	ldi	r22, 0x01	; 1
    23ee:	49 2f       	mov	r20, r25
    23f0:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 6));
    23f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f6:	82 95       	swap	r24
    23f8:	86 95       	lsr	r24
    23fa:	86 95       	lsr	r24
    23fc:	83 70       	andi	r24, 0x03	; 3
    23fe:	98 2f       	mov	r25, r24
    2400:	91 70       	andi	r25, 0x01	; 1
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	62 e0       	ldi	r22, 0x02	; 2
    2406:	49 2f       	mov	r20, r25
    2408:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 7));
    240c:	8f 85       	ldd	r24, Y+15	; 0x0f
    240e:	98 2f       	mov	r25, r24
    2410:	99 1f       	adc	r25, r25
    2412:	99 27       	eor	r25, r25
    2414:	99 1f       	adc	r25, r25
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	64 e0       	ldi	r22, 0x04	; 4
    241a:	49 2f       	mov	r20, r25
    241c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	62 e0       	ldi	r22, 0x02	; 2
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	62 e0       	ldi	r22, 0x02	; 2
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 0));
    2434:	8f 85       	ldd	r24, Y+15	; 0x0f
    2436:	98 2f       	mov	r25, r24
    2438:	91 70       	andi	r25, 0x01	; 1
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	49 2f       	mov	r20, r25
    2440:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 1));
    2444:	8f 85       	ldd	r24, Y+15	; 0x0f
    2446:	86 95       	lsr	r24
    2448:	98 2f       	mov	r25, r24
    244a:	91 70       	andi	r25, 0x01	; 1
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	49 2f       	mov	r20, r25
    2452:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 2));
    2456:	8f 85       	ldd	r24, Y+15	; 0x0f
    2458:	86 95       	lsr	r24
    245a:	86 95       	lsr	r24
    245c:	98 2f       	mov	r25, r24
    245e:	91 70       	andi	r25, 0x01	; 1
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	62 e0       	ldi	r22, 0x02	; 2
    2464:	49 2f       	mov	r20, r25
    2466:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 3));
    246a:	8f 85       	ldd	r24, Y+15	; 0x0f
    246c:	86 95       	lsr	r24
    246e:	86 95       	lsr	r24
    2470:	86 95       	lsr	r24
    2472:	98 2f       	mov	r25, r24
    2474:	91 70       	andi	r25, 0x01	; 1
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	64 e0       	ldi	r22, 0x04	; 4
    247a:	49 2f       	mov	r20, r25
    247c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	62 e0       	ldi	r22, 0x02	; 2
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	a0 ea       	ldi	r26, 0xA0	; 160
    2490:	b0 e4       	ldi	r27, 0x40	; 64
    2492:	8b 87       	std	Y+11, r24	; 0x0b
    2494:	9c 87       	std	Y+12, r25	; 0x0c
    2496:	ad 87       	std	Y+13, r26	; 0x0d
    2498:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249a:	6b 85       	ldd	r22, Y+11	; 0x0b
    249c:	7c 85       	ldd	r23, Y+12	; 0x0c
    249e:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	4a e7       	ldi	r20, 0x7A	; 122
    24a8:	55 e4       	ldi	r21, 0x45	; 69
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	8f 83       	std	Y+7, r24	; 0x07
    24b4:	98 87       	std	Y+8, r25	; 0x08
    24b6:	a9 87       	std	Y+9, r26	; 0x09
    24b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ba:	6f 81       	ldd	r22, Y+7	; 0x07
    24bc:	78 85       	ldd	r23, Y+8	; 0x08
    24be:	89 85       	ldd	r24, Y+9	; 0x09
    24c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e8       	ldi	r20, 0x80	; 128
    24c8:	5f e3       	ldi	r21, 0x3F	; 63
    24ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ce:	88 23       	and	r24, r24
    24d0:	2c f4       	brge	.+10     	; 0x24dc <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	3f c0       	rjmp	.+126    	; 0x255a <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	3f ef       	ldi	r19, 0xFF	; 255
    24e8:	4f e7       	ldi	r20, 0x7F	; 127
    24ea:	57 e4       	ldi	r21, 0x47	; 71
    24ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f0:	18 16       	cp	r1, r24
    24f2:	4c f5       	brge	.+82     	; 0x2546 <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e2       	ldi	r20, 0x20	; 32
    2502:	51 e4       	ldi	r21, 0x41	; 65
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
    251c:	0f c0       	rjmp	.+30     	; 0x253c <LCD_voidWriteChar+0x19c>
    251e:	80 e9       	ldi	r24, 0x90	; 144
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <LCD_voidWriteChar+0x18a>
    252e:	9c 83       	std	Y+4, r25	; 0x04
    2530:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	9e 83       	std	Y+6, r25	; 0x06
    253a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253c:	8d 81       	ldd	r24, Y+5	; 0x05
    253e:	9e 81       	ldd	r25, Y+6	; 0x06
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	69 f7       	brne	.-38     	; 0x251e <LCD_voidWriteChar+0x17e>
    2544:	14 c0       	rjmp	.+40     	; 0x256e <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2546:	6f 81       	ldd	r22, Y+7	; 0x07
    2548:	78 85       	ldd	r23, Y+8	; 0x08
    254a:	89 85       	ldd	r24, Y+9	; 0x09
    254c:	9a 85       	ldd	r25, Y+10	; 0x0a
    254e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <LCD_voidWriteChar+0x1c6>
    256a:	9a 83       	std	Y+2, r25	; 0x02
    256c:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    256e:	2f 96       	adiw	r28, 0x0f	; 15
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	00 d0       	rcall	.+0      	; 0x2586 <LCD_voidWriteString+0x6>
    2586:	0f 92       	push	r0
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	9b 83       	std	Y+3, r25	; 0x03
    258e:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    2590:	19 82       	std	Y+1, r1	; 0x01
    2592:	0e c0       	rjmp	.+28     	; 0x25b0 <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	9b 81       	ldd	r25, Y+3	; 0x03
    259e:	fc 01       	movw	r30, r24
    25a0:	e2 0f       	add	r30, r18
    25a2:	f3 1f       	adc	r31, r19
    25a4:	80 81       	ld	r24, Z
    25a6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_voidWriteChar>
		index++;
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	8f 5f       	subi	r24, 0xFF	; 255
    25ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ba:	fc 01       	movw	r30, r24
    25bc:	e2 0f       	add	r30, r18
    25be:	f3 1f       	adc	r31, r19
    25c0:	80 81       	ld	r24, Z
    25c2:	88 23       	and	r24, r24
    25c4:	39 f7       	brne	.-50     	; 0x2594 <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <LCD_voidWriteIntData>:
//	i++;
//	return str + i;
//
//}

void LCD_voidWriteIntData(s32 Data){
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	6a 97       	sbiw	r28, 0x1a	; 26
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	6f 8b       	std	Y+23, r22	; 0x17
    25e8:	78 8f       	std	Y+24, r23	; 0x18
    25ea:	89 8f       	std	Y+25, r24	; 0x19
    25ec:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    25ee:	8f 89       	ldd	r24, Y+23	; 0x17
    25f0:	98 8d       	ldd	r25, Y+24	; 0x18
    25f2:	a9 8d       	ldd	r26, Y+25	; 0x19
    25f4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	a1 05       	cpc	r26, r1
    25fa:	b1 05       	cpc	r27, r1
    25fc:	99 f0       	breq	.+38     	; 0x2624 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    25fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2600:	98 8d       	ldd	r25, Y+24	; 0x18
    2602:	a9 8d       	ldd	r26, Y+25	; 0x19
    2604:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2606:	9e 01       	movw	r18, r28
    2608:	2d 5f       	subi	r18, 0xFD	; 253
    260a:	3f 4f       	sbci	r19, 0xFF	; 255
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	a9 01       	movw	r20, r18
    2612:	0e 94 93 14 	call	0x2926	; 0x2926 <IntToString>
    2616:	9a 83       	std	Y+2, r25	; 0x02
    2618:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	9a 81       	ldd	r25, Y+2	; 0x02
    261e:	0e 94 c0 12 	call	0x2580	; 0x2580 <LCD_voidWriteString>
    2622:	03 c0       	rjmp	.+6      	; 0x262a <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    2624:	80 e3       	ldi	r24, 0x30	; 48
    2626:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_voidWriteChar>
	}
}
    262a:	6a 96       	adiw	r28, 0x1a	; 26
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	a6 97       	sbiw	r28, 0x26	; 38
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	6b a3       	std	Y+35, r22	; 0x23
    2652:	7c a3       	std	Y+36, r23	; 0x24
    2654:	8d a3       	std	Y+37, r24	; 0x25
    2656:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    2658:	6b a1       	ldd	r22, Y+35	; 0x23
    265a:	7c a1       	ldd	r23, Y+36	; 0x24
    265c:	8d a1       	ldd	r24, Y+37	; 0x25
    265e:	9e a1       	ldd	r25, Y+38	; 0x26
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	48 ec       	ldi	r20, 0xC8	; 200
    2666:	52 e4       	ldi	r21, 0x42	; 66
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	8b 87       	std	Y+11, r24	; 0x0b
    267e:	9c 87       	std	Y+12, r25	; 0x0c
    2680:	ad 87       	std	Y+13, r26	; 0x0d
    2682:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    2684:	8b 85       	ldd	r24, Y+11	; 0x0b
    2686:	9c 85       	ldd	r25, Y+12	; 0x0c
    2688:	ad 85       	ldd	r26, Y+13	; 0x0d
    268a:	be 85       	ldd	r27, Y+14	; 0x0e
    268c:	9e 01       	movw	r18, r28
    268e:	21 5f       	subi	r18, 0xF1	; 241
    2690:	3f 4f       	sbci	r19, 0xFF	; 255
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	a9 01       	movw	r20, r18
    2698:	0e 94 93 14 	call	0x2926	; 0x2926 <IntToString>
    269c:	9a 87       	std	Y+10, r25	; 0x0a
    269e:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    26a0:	1d 82       	std	Y+5, r1	; 0x05
    26a2:	1e 82       	std	Y+6, r1	; 0x06
    26a4:	1f 82       	std	Y+7, r1	; 0x07
    26a6:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    26a8:	19 82       	std	Y+1, r1	; 0x01
    26aa:	1a 82       	std	Y+2, r1	; 0x02
    26ac:	1b 82       	std	Y+3, r1	; 0x03
    26ae:	1c 82       	std	Y+4, r1	; 0x04
    26b0:	0b c0       	rjmp	.+22     	; 0x26c8 <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	af 81       	ldd	r26, Y+7	; 0x07
    26b8:	b8 85       	ldd	r27, Y+8	; 0x08
    26ba:	01 96       	adiw	r24, 0x01	; 1
    26bc:	a1 1d       	adc	r26, r1
    26be:	b1 1d       	adc	r27, r1
    26c0:	8d 83       	std	Y+5, r24	; 0x05
    26c2:	9e 83       	std	Y+6, r25	; 0x06
    26c4:	af 83       	std	Y+7, r26	; 0x07
    26c6:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    26c8:	2d 81       	ldd	r18, Y+5	; 0x05
    26ca:	3e 81       	ldd	r19, Y+6	; 0x06
    26cc:	89 85       	ldd	r24, Y+9	; 0x09
    26ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d0:	fc 01       	movw	r30, r24
    26d2:	e2 0f       	add	r30, r18
    26d4:	f3 1f       	adc	r31, r19
    26d6:	80 81       	ld	r24, Z
    26d8:	88 23       	and	r24, r24
    26da:	59 f7       	brne	.-42     	; 0x26b2 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	9e 81       	ldd	r25, Y+6	; 0x06
    26e0:	af 81       	ldd	r26, Y+7	; 0x07
    26e2:	b8 85       	ldd	r27, Y+8	; 0x08
    26e4:	02 97       	sbiw	r24, 0x02	; 2
    26e6:	a1 09       	sbc	r26, r1
    26e8:	b1 09       	sbc	r27, r1
    26ea:	8d 83       	std	Y+5, r24	; 0x05
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	af 83       	std	Y+7, r26	; 0x07
    26f0:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	9e 81       	ldd	r25, Y+6	; 0x06
    26f6:	af 81       	ldd	r26, Y+7	; 0x07
    26f8:	b8 85       	ldd	r27, Y+8	; 0x08
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	a1 05       	cpc	r26, r1
    26fe:	b1 05       	cpc	r27, r1
    2700:	49 f5       	brne	.+82     	; 0x2754 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    2702:	80 e3       	ldi	r24, 0x30	; 48
    2704:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_voidWriteChar>
    2708:	25 c0       	rjmp	.+74     	; 0x2754 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    270a:	29 81       	ldd	r18, Y+1	; 0x01
    270c:	3a 81       	ldd	r19, Y+2	; 0x02
    270e:	4b 81       	ldd	r20, Y+3	; 0x03
    2710:	5c 81       	ldd	r21, Y+4	; 0x04
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	af 81       	ldd	r26, Y+7	; 0x07
    2718:	b8 85       	ldd	r27, Y+8	; 0x08
    271a:	28 17       	cp	r18, r24
    271c:	39 07       	cpc	r19, r25
    271e:	4a 07       	cpc	r20, r26
    2720:	5b 07       	cpc	r21, r27
    2722:	19 f4       	brne	.+6      	; 0x272a <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    2724:	8e e2       	ldi	r24, 0x2E	; 46
    2726:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    272a:	29 81       	ldd	r18, Y+1	; 0x01
    272c:	3a 81       	ldd	r19, Y+2	; 0x02
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	fc 01       	movw	r30, r24
    2734:	e2 0f       	add	r30, r18
    2736:	f3 1f       	adc	r31, r19
    2738:	80 81       	ld	r24, Z
    273a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_voidWriteChar>
		counter2++;
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	ab 81       	ldd	r26, Y+3	; 0x03
    2744:	bc 81       	ldd	r27, Y+4	; 0x04
    2746:	01 96       	adiw	r24, 0x01	; 1
    2748:	a1 1d       	adc	r26, r1
    274a:	b1 1d       	adc	r27, r1
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	ab 83       	std	Y+3, r26	; 0x03
    2752:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    2754:	29 81       	ldd	r18, Y+1	; 0x01
    2756:	3a 81       	ldd	r19, Y+2	; 0x02
    2758:	89 85       	ldd	r24, Y+9	; 0x09
    275a:	9a 85       	ldd	r25, Y+10	; 0x0a
    275c:	fc 01       	movw	r30, r24
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	80 81       	ld	r24, Z
    2764:	88 23       	and	r24, r24
    2766:	89 f6       	brne	.-94     	; 0x270a <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    2768:	a6 96       	adiw	r28, 0x26	; 38
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <LCD_voidGoToPosition+0x6>
    2780:	0f 92       	push	r0
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	8a 83       	std	Y+2, r24	; 0x02
    2788:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    278a:	80 e8       	ldi	r24, 0x80	; 128
    278c:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	88 23       	and	r24, r24
    2792:	21 f4       	brne	.+8      	; 0x279c <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	80 58       	subi	r24, 0x80	; 128
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	14 c0       	rjmp	.+40     	; 0x27c4 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	81 30       	cpi	r24, 0x01	; 1
    27a0:	21 f4       	brne	.+8      	; 0x27aa <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	80 54       	subi	r24, 0x40	; 64
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	0d c0       	rjmp	.+26     	; 0x27c4 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	82 30       	cpi	r24, 0x02	; 2
    27ae:	21 f4       	brne	.+8      	; 0x27b8 <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	8c 56       	subi	r24, 0x6C	; 108
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	83 30       	cpi	r24, 0x03	; 3
    27bc:	19 f4       	brne	.+6      	; 0x27c4 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	8c 52       	subi	r24, 0x2C	; 44
    27c2:	89 83       	std	Y+1, r24	; 0x01
	}

	Set_Bit(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	80 68       	ori	r24, 0x80	; 128
    27c8:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_voidSendCommand>
}
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <LCD_voidClear>:

void LCD_voidClear(u8 X_Position, u8 Y_Position)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <LCD_voidClear+0x6>
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position,Y_Position);
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	6a 81       	ldd	r22, Y+2	; 0x02
    27ee:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    27f2:	80 e2       	ldi	r24, 0x20	; 32
    27f4:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_voidWriteChar>
}
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <LCD_voidClearLine>:
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	00 d0       	rcall	.+0      	; 0x2808 <LCD_voidClearLine+0x6>
    2808:	0f 92       	push	r0
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	8a 83       	std	Y+2, r24	; 0x02
    2810:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 num = 0; num <= Y_Position; num++)
    2812:	19 82       	std	Y+1, r1	; 0x01
    2814:	0a c0       	rjmp	.+20     	; 0x282a <LCD_voidClearLine+0x28>
	{
		LCD_voidGoToPosition(X_Position,num);
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	69 81       	ldd	r22, Y+1	; 0x01
    281a:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_voidGoToPosition>
		LCD_voidWriteChar(' ');
    281e:	80 e2       	ldi	r24, 0x20	; 32
    2820:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_voidWriteChar>
	LCD_voidGoToPosition(X_Position,Y_Position);
	LCD_voidWriteChar(' ');
}
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
	for(u8 num = 0; num <= Y_Position; num++)
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	8f 5f       	subi	r24, 0xFF	; 255
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	99 81       	ldd	r25, Y+1	; 0x01
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	89 17       	cp	r24, r25
    2830:	90 f7       	brcc	.-28     	; 0x2816 <LCD_voidClearLine+0x14>
	{
		LCD_voidGoToPosition(X_Position,num);
		LCD_voidWriteChar(' ');
	}
}
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	27 97       	sbiw	r28, 0x07	; 7
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	9c 83       	std	Y+4, r25	; 0x04
    2854:	8b 83       	std	Y+3, r24	; 0x03
    2856:	6d 83       	std	Y+5, r22	; 0x05
    2858:	4e 83       	std	Y+6, r20	; 0x06
    285a:	2f 83       	std	Y+7, r18	; 0x07

	LCD_voidGoToPosition(row,column);
    285c:	8e 81       	ldd	r24, Y+6	; 0x06
    285e:	6f 81       	ldd	r22, Y+7	; 0x07
    2860:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_voidWriteChar>
	u8 address = 0;
    286a:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    286c:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	88 30       	cpi	r24, 0x08	; 8
    2872:	30 f5       	brcc	.+76     	; 0x28c0 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	88 2f       	mov	r24, r24
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	8a 83       	std	Y+2, r24	; 0x02
		Set_Bit(address,6);
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	80 64       	ori	r24, 0x40	; 64
    288c:	8a 83       	std	Y+2, r24	; 0x02
		Clear_Bit(address,7);
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	8f 77       	andi	r24, 0x7F	; 127
    2892:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    289a:	19 82       	std	Y+1, r1	; 0x01
    289c:	0e c0       	rjmp	.+28     	; 0x28ba <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	28 2f       	mov	r18, r24
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	9c 81       	ldd	r25, Y+4	; 0x04
    28a8:	fc 01       	movw	r30, r24
    28aa:	e2 0f       	add	r30, r18
    28ac:	f3 1f       	adc	r31, r19
    28ae:	80 81       	ld	r24, Z
    28b0:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		Set_Bit(address,6);
		Clear_Bit(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	8f 5f       	subi	r24, 0xFF	; 255
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	88 30       	cpi	r24, 0x08	; 8
    28be:	78 f3       	brcs	.-34     	; 0x289e <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_voidSendCommand>
}
    28c6:	27 96       	adiw	r28, 0x07	; 7
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <Random>:
u8 Error_Flag;


void RX_Complete();

u8 Random(u8 Copy_u8R1, u8 Copy_u8R2){
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	00 d0       	rcall	.+0      	; 0x28de <Random+0x6>
    28de:	0f 92       	push	r0
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	8a 83       	std	Y+2, r24	; 0x02
    28e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 num = (rand() %  (Copy_u8R2 - Copy_u8R1 + 1)) + Copy_u8R1;
    28e8:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <rand>
    28ec:	ac 01       	movw	r20, r24
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	b9 01       	movw	r22, r18
    28fc:	68 1b       	sub	r22, r24
    28fe:	79 0b       	sbc	r23, r25
    2900:	cb 01       	movw	r24, r22
    2902:	9c 01       	movw	r18, r24
    2904:	2f 5f       	subi	r18, 0xFF	; 255
    2906:	3f 4f       	sbci	r19, 0xFF	; 255
    2908:	ca 01       	movw	r24, r20
    290a:	b9 01       	movw	r22, r18
    290c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__divmodhi4>
    2910:	98 2f       	mov	r25, r24
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	89 0f       	add	r24, r25
    2916:	89 83       	std	Y+1, r24	; 0x01
	return num;
    2918:	89 81       	ldd	r24, Y+1	; 0x01
}
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	cf 91       	pop	r28
    2922:	df 91       	pop	r29
    2924:	08 95       	ret

00002926 <IntToString>:


u8* IntToString(s32 Copyu8Int, u8 *str)
{
    2926:	0f 93       	push	r16
    2928:	1f 93       	push	r17
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	2e 97       	sbiw	r28, 0x0e	; 14
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	69 87       	std	Y+9, r22	; 0x09
    2940:	7a 87       	std	Y+10, r23	; 0x0a
    2942:	8b 87       	std	Y+11, r24	; 0x0b
    2944:	9c 87       	std	Y+12, r25	; 0x0c
    2946:	5e 87       	std	Y+14, r21	; 0x0e
    2948:	4d 87       	std	Y+13, r20	; 0x0d

	u32 flag = 0;
    294a:	1d 82       	std	Y+5, r1	; 0x05
    294c:	1e 82       	std	Y+6, r1	; 0x06
    294e:	1f 82       	std	Y+7, r1	; 0x07
    2950:	18 86       	std	Y+8, r1	; 0x08
	u32 i = 20 - 1;
    2952:	83 e1       	ldi	r24, 0x13	; 19
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a0 e0       	ldi	r26, 0x00	; 0
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	ab 83       	std	Y+3, r26	; 0x03
    2960:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    2962:	29 81       	ldd	r18, Y+1	; 0x01
    2964:	3a 81       	ldd	r19, Y+2	; 0x02
    2966:	8d 85       	ldd	r24, Y+13	; 0x0d
    2968:	9e 85       	ldd	r25, Y+14	; 0x0e
    296a:	fc 01       	movw	r30, r24
    296c:	e2 0f       	add	r30, r18
    296e:	f3 1f       	adc	r31, r19
    2970:	10 82       	st	Z, r1
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	9a 81       	ldd	r25, Y+2	; 0x02
    2976:	ab 81       	ldd	r26, Y+3	; 0x03
    2978:	bc 81       	ldd	r27, Y+4	; 0x04
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	a1 09       	sbc	r26, r1
    297e:	b1 09       	sbc	r27, r1
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	9a 83       	std	Y+2, r25	; 0x02
    2984:	ab 83       	std	Y+3, r26	; 0x03
    2986:	bc 83       	std	Y+4, r27	; 0x04

	if (Copyu8Int < 0)
    2988:	89 85       	ldd	r24, Y+9	; 0x09
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	ab 85       	ldd	r26, Y+11	; 0x0b
    298e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2990:	bb 23       	and	r27, r27
    2992:	0c f0       	brlt	.+2      	; 0x2996 <IntToString+0x70>
    2994:	4d c0       	rjmp	.+154    	; 0x2a30 <IntToString+0x10a>
	{
		flag = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a0 e0       	ldi	r26, 0x00	; 0
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	8d 83       	std	Y+5, r24	; 0x05
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	af 83       	std	Y+7, r26	; 0x07
    29a4:	b8 87       	std	Y+8, r27	; 0x08
		Copyu8Int = -Copyu8Int;
    29a6:	89 85       	ldd	r24, Y+9	; 0x09
    29a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29aa:	ab 85       	ldd	r26, Y+11	; 0x0b
    29ac:	bc 85       	ldd	r27, Y+12	; 0x0c
    29ae:	b0 95       	com	r27
    29b0:	a0 95       	com	r26
    29b2:	90 95       	com	r25
    29b4:	81 95       	neg	r24
    29b6:	9f 4f       	sbci	r25, 0xFF	; 255
    29b8:	af 4f       	sbci	r26, 0xFF	; 255
    29ba:	bf 4f       	sbci	r27, 0xFF	; 255
    29bc:	89 87       	std	Y+9, r24	; 0x09
    29be:	9a 87       	std	Y+10, r25	; 0x0a
    29c0:	ab 87       	std	Y+11, r26	; 0x0b
    29c2:	bc 87       	std	Y+12, r27	; 0x0c
    29c4:	35 c0       	rjmp	.+106    	; 0x2a30 <IntToString+0x10a>
	}
	while (Copyu8Int != 0)
	{
		str[i--] = (Copyu8Int % 10) + '0';
    29c6:	29 81       	ldd	r18, Y+1	; 0x01
    29c8:	3a 81       	ldd	r19, Y+2	; 0x02
    29ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    29cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ce:	8c 01       	movw	r16, r24
    29d0:	02 0f       	add	r16, r18
    29d2:	13 1f       	adc	r17, r19
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    29da:	bc 85       	ldd	r27, Y+12	; 0x0c
    29dc:	2a e0       	ldi	r18, 0x0A	; 10
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e0       	ldi	r20, 0x00	; 0
    29e2:	50 e0       	ldi	r21, 0x00	; 0
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__divmodsi4>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	80 5d       	subi	r24, 0xD0	; 208
    29f2:	f8 01       	movw	r30, r16
    29f4:	80 83       	st	Z, r24
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	ab 81       	ldd	r26, Y+3	; 0x03
    29fc:	bc 81       	ldd	r27, Y+4	; 0x04
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	a1 09       	sbc	r26, r1
    2a02:	b1 09       	sbc	r27, r1
    2a04:	89 83       	std	Y+1, r24	; 0x01
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	ab 83       	std	Y+3, r26	; 0x03
    2a0a:	bc 83       	std	Y+4, r27	; 0x04
		Copyu8Int /= 10;
    2a0c:	89 85       	ldd	r24, Y+9	; 0x09
    2a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a10:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a12:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a14:	2a e0       	ldi	r18, 0x0A	; 10
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	50 e0       	ldi	r21, 0x00	; 0
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__divmodsi4>
    2a24:	da 01       	movw	r26, r20
    2a26:	c9 01       	movw	r24, r18
    2a28:	89 87       	std	Y+9, r24	; 0x09
    2a2a:	9a 87       	std	Y+10, r25	; 0x0a
    2a2c:	ab 87       	std	Y+11, r26	; 0x0b
    2a2e:	bc 87       	std	Y+12, r27	; 0x0c
	if (Copyu8Int < 0)
	{
		flag = 1;
		Copyu8Int = -Copyu8Int;
	}
	while (Copyu8Int != 0)
    2a30:	89 85       	ldd	r24, Y+9	; 0x09
    2a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a34:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a36:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a38:	00 97       	sbiw	r24, 0x00	; 0
    2a3a:	a1 05       	cpc	r26, r1
    2a3c:	b1 05       	cpc	r27, r1
    2a3e:	19 f6       	brne	.-122    	; 0x29c6 <IntToString+0xa0>
	{
		str[i--] = (Copyu8Int % 10) + '0';
		Copyu8Int /= 10;
	}

	if (flag)
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	af 81       	ldd	r26, Y+7	; 0x07
    2a46:	b8 85       	ldd	r27, Y+8	; 0x08
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	a1 05       	cpc	r26, r1
    2a4c:	b1 05       	cpc	r27, r1
    2a4e:	a1 f0       	breq	.+40     	; 0x2a78 <IntToString+0x152>
	{
		str[i--] = '-';
    2a50:	29 81       	ldd	r18, Y+1	; 0x01
    2a52:	3a 81       	ldd	r19, Y+2	; 0x02
    2a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a58:	fc 01       	movw	r30, r24
    2a5a:	e2 0f       	add	r30, r18
    2a5c:	f3 1f       	adc	r31, r19
    2a5e:	8d e2       	ldi	r24, 0x2D	; 45
    2a60:	80 83       	st	Z, r24
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	ab 81       	ldd	r26, Y+3	; 0x03
    2a68:	bc 81       	ldd	r27, Y+4	; 0x04
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	a1 09       	sbc	r26, r1
    2a6e:	b1 09       	sbc	r27, r1
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	ab 83       	std	Y+3, r26	; 0x03
    2a76:	bc 83       	std	Y+4, r27	; 0x04
	}

	i++;
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a7e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a80:	01 96       	adiw	r24, 0x01	; 1
    2a82:	a1 1d       	adc	r26, r1
    2a84:	b1 1d       	adc	r27, r1
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	9a 83       	std	Y+2, r25	; 0x02
    2a8a:	ab 83       	std	Y+3, r26	; 0x03
    2a8c:	bc 83       	std	Y+4, r27	; 0x04

	return str + i;
    2a8e:	29 81       	ldd	r18, Y+1	; 0x01
    2a90:	3a 81       	ldd	r19, Y+2	; 0x02
    2a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a96:	82 0f       	add	r24, r18
    2a98:	93 1f       	adc	r25, r19

}
    2a9a:	2e 96       	adiw	r28, 0x0e	; 14
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	1f 91       	pop	r17
    2aac:	0f 91       	pop	r16
    2aae:	08 95       	ret

00002ab0 <main>:


int main()
{
    2ab0:	0f 93       	push	r16
    2ab2:	1f 93       	push	r17
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <main+0xa>
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <main+0xc>
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <main+0xe>
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    2ac2:	0e 94 fc 07 	call	0xff8	; 0xff8 <PORT_voidInit>

	LCD_voidInit();
    2ac6:	0e 94 20 0a 	call	0x1440	; 0x1440 <LCD_voidInit>

	GIE_voidEnable();
    2aca:	0e 94 20 08 	call	0x1040	; 0x1040 <GIE_voidEnable>

	USART_voidRXCallBackFunc(RX_Complete);
    2ace:	84 e4       	ldi	r24, 0x44	; 68
    2ad0:	96 e1       	ldi	r25, 0x16	; 22
    2ad2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <USART_voidRXCallBackFunc>

	USART_voidInit();
    2ad6:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_voidInit>

	USART_voidRXEnableInterrupt();
    2ada:	0e 94 0f 07 	call	0xe1e	; 0xe1e <USART_voidRXEnableInterrupt>


	while(1)
	{
		u32 RandNum = Random(1,250) * Random(1,250) + 84267531;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	6a ef       	ldi	r22, 0xFA	; 250
    2ae2:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <Random>
    2ae6:	08 2f       	mov	r16, r24
    2ae8:	10 e0       	ldi	r17, 0x00	; 0
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	6a ef       	ldi	r22, 0xFA	; 250
    2aee:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <Random>
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9c 01       	movw	r18, r24
    2af8:	02 9f       	mul	r16, r18
    2afa:	c0 01       	movw	r24, r0
    2afc:	03 9f       	mul	r16, r19
    2afe:	90 0d       	add	r25, r0
    2b00:	12 9f       	mul	r17, r18
    2b02:	90 0d       	add	r25, r0
    2b04:	11 24       	eor	r1, r1
    2b06:	aa 27       	eor	r26, r26
    2b08:	97 fd       	sbrc	r25, 7
    2b0a:	a0 95       	com	r26
    2b0c:	ba 2f       	mov	r27, r26
    2b0e:	85 5f       	subi	r24, 0xF5	; 245
    2b10:	9d 42       	sbci	r25, 0x2D	; 45
    2b12:	aa 4f       	sbci	r26, 0xFA	; 250
    2b14:	ba 4f       	sbci	r27, 0xFA	; 250
    2b16:	8b 83       	std	Y+3, r24	; 0x03
    2b18:	9c 83       	std	Y+4, r25	; 0x04
    2b1a:	ad 83       	std	Y+5, r26	; 0x05
    2b1c:	be 83       	std	Y+6, r27	; 0x06

		if(Done_Flag == 1)
    2b1e:	80 91 b1 00 	lds	r24, 0x00B1
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	e1 f6       	brne	.-72     	; 0x2ade <main+0x2e>
		{
			Done_Flag = 0;
    2b26:	10 92 b1 00 	sts	0x00B1, r1

			if(memcmp(Globale_u8Data, "2701", 4) == 0 )
    2b2a:	83 eb       	ldi	r24, 0xB3	; 179
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	20 e6       	ldi	r18, 0x60	; 96
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	b9 01       	movw	r22, r18
    2b34:	44 e0       	ldi	r20, 0x04	; 4
    2b36:	50 e0       	ldi	r21, 0x00	; 0
    2b38:	0e 94 80 17 	call	0x2f00	; 0x2f00 <memcmp>
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <main+0x92>
    2b40:	47 c0       	rjmp	.+142    	; 0x2bd0 <main+0x120>
			{
				strcat(Accessed, IntToString(RandNum, tempStr));
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	ad 81       	ldd	r26, Y+5	; 0x05
    2b48:	be 81       	ldd	r27, Y+6	; 0x06
    2b4a:	21 ed       	ldi	r18, 0xD1	; 209
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	a9 01       	movw	r20, r18
    2b54:	0e 94 93 14 	call	0x2926	; 0x2926 <IntToString>
    2b58:	9c 01       	movw	r18, r24
    2b5a:	86 e9       	ldi	r24, 0x96	; 150
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	b9 01       	movw	r22, r18
    2b60:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <strcat>
				LCD_voidWriteString(Accessed);
    2b64:	86 e9       	ldi	r24, 0x96	; 150
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 c0 12 	call	0x2580	; 0x2580 <LCD_voidWriteString>

				for(u8 i = 4; i < 12; i++)
    2b6c:	84 e0       	ldi	r24, 0x04	; 4
    2b6e:	8a 83       	std	Y+2, r24	; 0x02
    2b70:	21 c0       	rjmp	.+66     	; 0x2bb4 <main+0x104>
				{
					Cipher[i-4]= ((Accessed[i] - '0') ^ (Key[i-4] - '0')) + '0';
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	88 2f       	mov	r24, r24
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	9c 01       	movw	r18, r24
    2b7a:	24 50       	subi	r18, 0x04	; 4
    2b7c:	30 40       	sbci	r19, 0x00	; 0
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	fc 01       	movw	r30, r24
    2b86:	ea 56       	subi	r30, 0x6A	; 106
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	80 81       	ld	r24, Z
    2b8c:	80 53       	subi	r24, 0x30	; 48
    2b8e:	48 2f       	mov	r20, r24
    2b90:	8a 81       	ldd	r24, Y+2	; 0x02
    2b92:	88 2f       	mov	r24, r24
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	04 97       	sbiw	r24, 0x04	; 4
    2b98:	fc 01       	movw	r30, r24
    2b9a:	e3 57       	subi	r30, 0x73	; 115
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 81       	ld	r24, Z
    2ba0:	80 53       	subi	r24, 0x30	; 48
    2ba2:	84 27       	eor	r24, r20
    2ba4:	80 5d       	subi	r24, 0xD0	; 208
    2ba6:	f9 01       	movw	r30, r18
    2ba8:	e8 53       	subi	r30, 0x38	; 56
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 83       	st	Z, r24
			if(memcmp(Globale_u8Data, "2701", 4) == 0 )
			{
				strcat(Accessed, IntToString(RandNum, tempStr));
				LCD_voidWriteString(Accessed);

				for(u8 i = 4; i < 12; i++)
    2bae:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb0:	8f 5f       	subi	r24, 0xFF	; 255
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	8c 30       	cpi	r24, 0x0C	; 12
    2bb8:	e0 f2       	brcs	.-72     	; 0x2b72 <main+0xc2>
				{
					Cipher[i-4]= ((Accessed[i] - '0') ^ (Key[i-4] - '0')) + '0';
				}

				Cipher[8]='\0';
    2bba:	10 92 d0 00 	sts	0x00D0, r1

				LCD_voidGoToPosition(2,0);
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_voidGoToPosition>

				LCD_voidWriteString(Cipher);
    2bc6:	88 ec       	ldi	r24, 0xC8	; 200
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	0e 94 c0 12 	call	0x2580	; 0x2580 <LCD_voidWriteString>
    2bce:	57 c0       	rjmp	.+174    	; 0x2c7e <main+0x1ce>
			}
			else if(memcmp(Globale_u8Data, "3101AA00", 8) == 0 )
    2bd0:	83 eb       	ldi	r24, 0xB3	; 179
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	25 e6       	ldi	r18, 0x65	; 101
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	b9 01       	movw	r22, r18
    2bda:	48 e0       	ldi	r20, 0x08	; 8
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	0e 94 80 17 	call	0x2f00	; 0x2f00 <memcmp>
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	99 f4       	brne	.+38     	; 0x2c0c <main+0x15c>
			{
				if(Security_Flag == 1)
    2be6:	80 91 b2 00 	lds	r24, 0x00B2
    2bea:	81 30       	cpi	r24, 0x01	; 1
    2bec:	51 f4       	brne	.+20     	; 0x2c02 <main+0x152>
				{
					LCD_voidWriteString((u8*)"7101AA00");
    2bee:	8e e6       	ldi	r24, 0x6E	; 110
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 c0 12 	call	0x2580	; 0x2580 <LCD_voidWriteString>
					DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_0, DIO_u8PIN_HIGH);
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	41 e0       	ldi	r20, 0x01	; 1
    2bfc:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    2c00:	3e c0       	rjmp	.+124    	; 0x2c7e <main+0x1ce>
				}
				else
				{
					LCD_voidWriteString(NS_Req);
    2c02:	82 ea       	ldi	r24, 0xA2	; 162
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	0e 94 c0 12 	call	0x2580	; 0x2580 <LCD_voidWriteString>
    2c0a:	39 c0       	rjmp	.+114    	; 0x2c7e <main+0x1ce>
				}
			}
			else if(memcmp(Globale_u8Data, "2702", 4) == 0 )
    2c0c:	83 eb       	ldi	r24, 0xB3	; 179
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	27 e7       	ldi	r18, 0x77	; 119
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	b9 01       	movw	r22, r18
    2c16:	44 e0       	ldi	r20, 0x04	; 4
    2c18:	50 e0       	ldi	r21, 0x00	; 0
    2c1a:	0e 94 80 17 	call	0x2f00	; 0x2f00 <memcmp>
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	71 f5       	brne	.+92     	; 0x2c7e <main+0x1ce>
			{
				for(u8 i = 4; i < 12 ; i++)
    2c22:	84 e0       	ldi	r24, 0x04	; 4
    2c24:	89 83       	std	Y+1, r24	; 0x01
    2c26:	18 c0       	rjmp	.+48     	; 0x2c58 <main+0x1a8>
				{
					if( Cipher[i-4] != Globale_u8Data[i])
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	04 97       	sbiw	r24, 0x04	; 4
    2c30:	fc 01       	movw	r30, r24
    2c32:	e8 53       	subi	r30, 0x38	; 56
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	20 81       	ld	r18, Z
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	88 2f       	mov	r24, r24
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	fc 01       	movw	r30, r24
    2c40:	ed 54       	subi	r30, 0x4D	; 77
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	80 81       	ld	r24, Z
    2c46:	28 17       	cp	r18, r24
    2c48:	21 f0       	breq	.+8      	; 0x2c52 <main+0x1a2>
					{
						Error_Flag = 1;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	80 93 c7 00 	sts	0x00C7, r24
    2c50:	06 c0       	rjmp	.+12     	; 0x2c5e <main+0x1ae>
					LCD_voidWriteString(NS_Req);
				}
			}
			else if(memcmp(Globale_u8Data, "2702", 4) == 0 )
			{
				for(u8 i = 4; i < 12 ; i++)
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	8f 5f       	subi	r24, 0xFF	; 255
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	8c 30       	cpi	r24, 0x0C	; 12
    2c5c:	28 f3       	brcs	.-54     	; 0x2c28 <main+0x178>
					{
						Error_Flag = 1;
						break;
					}
				}
				if(Error_Flag == 0)
    2c5e:	80 91 c7 00 	lds	r24, 0x00C7
    2c62:	88 23       	and	r24, r24
    2c64:	41 f4       	brne	.+16     	; 0x2c76 <main+0x1c6>
				{
					LCD_voidWriteString((u8*)"6702");
    2c66:	8c e7       	ldi	r24, 0x7C	; 124
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 c0 12 	call	0x2580	; 0x2580 <LCD_voidWriteString>
					Security_Flag=1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	80 93 b2 00 	sts	0x00B2, r24
    2c74:	04 c0       	rjmp	.+8      	; 0x2c7e <main+0x1ce>
				}
				else
				{
					LCD_voidWriteString(NS_Routine);
    2c76:	8b e9       	ldi	r24, 0x9B	; 155
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	0e 94 c0 12 	call	0x2580	; 0x2580 <LCD_voidWriteString>
				}
			}

			RX_Index = 0;
    2c7e:	10 92 b0 00 	sts	0x00B0, r1
			USART_voidRXEnableInterrupt();
    2c82:	0e 94 0f 07 	call	0xe1e	; 0xe1e <USART_voidRXEnableInterrupt>
    2c86:	2b cf       	rjmp	.-426    	; 0x2ade <main+0x2e>

00002c88 <RX_Complete>:
	return 0;
}


void RX_Complete()
{
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	0f 92       	push	r0
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
	u8 temp = 0;
    2c92:	19 82       	std	Y+1, r1	; 0x01
	temp = USART_u8ReceiveInterrupt();
    2c94:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <USART_u8ReceiveInterrupt>
    2c98:	89 83       	std	Y+1, r24	; 0x01

	if(  temp == '\r' )
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	8d 30       	cpi	r24, 0x0D	; 13
    2c9e:	89 f4       	brne	.+34     	; 0x2cc2 <RX_Complete+0x3a>
	{
		Globale_u8Data[RX_Index] = '\0';
    2ca0:	80 91 b0 00 	lds	r24, 0x00B0
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	fc 01       	movw	r30, r24
    2caa:	ed 54       	subi	r30, 0x4D	; 77
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	10 82       	st	Z, r1
		Done_Flag = 1;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	80 93 b1 00 	sts	0x00B1, r24
		USART_voidRXDisableInterrupt();
    2cb6:	0e 94 1d 07 	call	0xe3a	; 0xe3a <USART_voidRXDisableInterrupt>
		LCD_voidSendCommand(LCD_ClearDisplay);
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_voidSendCommand>
    2cc0:	1f c0       	rjmp	.+62     	; 0x2d00 <RX_Complete+0x78>
	}
	else if( temp == 0x08)
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	88 30       	cpi	r24, 0x08	; 8
    2cc6:	71 f4       	brne	.+28     	; 0x2ce4 <RX_Complete+0x5c>
	{
		Globale_u8Data[--RX_Index]= '\0';
    2cc8:	80 91 b0 00 	lds	r24, 0x00B0
    2ccc:	81 50       	subi	r24, 0x01	; 1
    2cce:	80 93 b0 00 	sts	0x00B0, r24
    2cd2:	80 91 b0 00 	lds	r24, 0x00B0
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	fc 01       	movw	r30, r24
    2cdc:	ed 54       	subi	r30, 0x4D	; 77
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	10 82       	st	Z, r1
    2ce2:	0e c0       	rjmp	.+28     	; 0x2d00 <RX_Complete+0x78>
	}
	else
	{
		Globale_u8Data[RX_Index] = temp ;
    2ce4:	80 91 b0 00 	lds	r24, 0x00B0
    2ce8:	88 2f       	mov	r24, r24
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	fc 01       	movw	r30, r24
    2cee:	ed 54       	subi	r30, 0x4D	; 77
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	80 83       	st	Z, r24
		RX_Index++;
    2cf6:	80 91 b0 00 	lds	r24, 0x00B0
    2cfa:	8f 5f       	subi	r24, 0xFF	; 255
    2cfc:	80 93 b0 00 	sts	0x00B0, r24
	}
}
    2d00:	0f 90       	pop	r0
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	08 95       	ret

00002d08 <__divmodhi4>:
    2d08:	97 fb       	bst	r25, 7
    2d0a:	09 2e       	mov	r0, r25
    2d0c:	07 26       	eor	r0, r23
    2d0e:	0a d0       	rcall	.+20     	; 0x2d24 <__divmodhi4_neg1>
    2d10:	77 fd       	sbrc	r23, 7
    2d12:	04 d0       	rcall	.+8      	; 0x2d1c <__divmodhi4_neg2>
    2d14:	27 d0       	rcall	.+78     	; 0x2d64 <__udivmodhi4>
    2d16:	06 d0       	rcall	.+12     	; 0x2d24 <__divmodhi4_neg1>
    2d18:	00 20       	and	r0, r0
    2d1a:	1a f4       	brpl	.+6      	; 0x2d22 <__divmodhi4_exit>

00002d1c <__divmodhi4_neg2>:
    2d1c:	70 95       	com	r23
    2d1e:	61 95       	neg	r22
    2d20:	7f 4f       	sbci	r23, 0xFF	; 255

00002d22 <__divmodhi4_exit>:
    2d22:	08 95       	ret

00002d24 <__divmodhi4_neg1>:
    2d24:	f6 f7       	brtc	.-4      	; 0x2d22 <__divmodhi4_exit>
    2d26:	90 95       	com	r25
    2d28:	81 95       	neg	r24
    2d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2c:	08 95       	ret

00002d2e <__divmodsi4>:
    2d2e:	97 fb       	bst	r25, 7
    2d30:	09 2e       	mov	r0, r25
    2d32:	05 26       	eor	r0, r21
    2d34:	0e d0       	rcall	.+28     	; 0x2d52 <__divmodsi4_neg1>
    2d36:	57 fd       	sbrc	r21, 7
    2d38:	04 d0       	rcall	.+8      	; 0x2d42 <__divmodsi4_neg2>
    2d3a:	28 d0       	rcall	.+80     	; 0x2d8c <__udivmodsi4>
    2d3c:	0a d0       	rcall	.+20     	; 0x2d52 <__divmodsi4_neg1>
    2d3e:	00 1c       	adc	r0, r0
    2d40:	38 f4       	brcc	.+14     	; 0x2d50 <__divmodsi4_exit>

00002d42 <__divmodsi4_neg2>:
    2d42:	50 95       	com	r21
    2d44:	40 95       	com	r20
    2d46:	30 95       	com	r19
    2d48:	21 95       	neg	r18
    2d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d4e:	5f 4f       	sbci	r21, 0xFF	; 255

00002d50 <__divmodsi4_exit>:
    2d50:	08 95       	ret

00002d52 <__divmodsi4_neg1>:
    2d52:	f6 f7       	brtc	.-4      	; 0x2d50 <__divmodsi4_exit>
    2d54:	90 95       	com	r25
    2d56:	80 95       	com	r24
    2d58:	70 95       	com	r23
    2d5a:	61 95       	neg	r22
    2d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d60:	9f 4f       	sbci	r25, 0xFF	; 255
    2d62:	08 95       	ret

00002d64 <__udivmodhi4>:
    2d64:	aa 1b       	sub	r26, r26
    2d66:	bb 1b       	sub	r27, r27
    2d68:	51 e1       	ldi	r21, 0x11	; 17
    2d6a:	07 c0       	rjmp	.+14     	; 0x2d7a <__udivmodhi4_ep>

00002d6c <__udivmodhi4_loop>:
    2d6c:	aa 1f       	adc	r26, r26
    2d6e:	bb 1f       	adc	r27, r27
    2d70:	a6 17       	cp	r26, r22
    2d72:	b7 07       	cpc	r27, r23
    2d74:	10 f0       	brcs	.+4      	; 0x2d7a <__udivmodhi4_ep>
    2d76:	a6 1b       	sub	r26, r22
    2d78:	b7 0b       	sbc	r27, r23

00002d7a <__udivmodhi4_ep>:
    2d7a:	88 1f       	adc	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	5a 95       	dec	r21
    2d80:	a9 f7       	brne	.-22     	; 0x2d6c <__udivmodhi4_loop>
    2d82:	80 95       	com	r24
    2d84:	90 95       	com	r25
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	08 95       	ret

00002d8c <__udivmodsi4>:
    2d8c:	a1 e2       	ldi	r26, 0x21	; 33
    2d8e:	1a 2e       	mov	r1, r26
    2d90:	aa 1b       	sub	r26, r26
    2d92:	bb 1b       	sub	r27, r27
    2d94:	fd 01       	movw	r30, r26
    2d96:	0d c0       	rjmp	.+26     	; 0x2db2 <__udivmodsi4_ep>

00002d98 <__udivmodsi4_loop>:
    2d98:	aa 1f       	adc	r26, r26
    2d9a:	bb 1f       	adc	r27, r27
    2d9c:	ee 1f       	adc	r30, r30
    2d9e:	ff 1f       	adc	r31, r31
    2da0:	a2 17       	cp	r26, r18
    2da2:	b3 07       	cpc	r27, r19
    2da4:	e4 07       	cpc	r30, r20
    2da6:	f5 07       	cpc	r31, r21
    2da8:	20 f0       	brcs	.+8      	; 0x2db2 <__udivmodsi4_ep>
    2daa:	a2 1b       	sub	r26, r18
    2dac:	b3 0b       	sbc	r27, r19
    2dae:	e4 0b       	sbc	r30, r20
    2db0:	f5 0b       	sbc	r31, r21

00002db2 <__udivmodsi4_ep>:
    2db2:	66 1f       	adc	r22, r22
    2db4:	77 1f       	adc	r23, r23
    2db6:	88 1f       	adc	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	1a 94       	dec	r1
    2dbc:	69 f7       	brne	.-38     	; 0x2d98 <__udivmodsi4_loop>
    2dbe:	60 95       	com	r22
    2dc0:	70 95       	com	r23
    2dc2:	80 95       	com	r24
    2dc4:	90 95       	com	r25
    2dc6:	9b 01       	movw	r18, r22
    2dc8:	ac 01       	movw	r20, r24
    2dca:	bd 01       	movw	r22, r26
    2dcc:	cf 01       	movw	r24, r30
    2dce:	08 95       	ret

00002dd0 <__prologue_saves__>:
    2dd0:	2f 92       	push	r2
    2dd2:	3f 92       	push	r3
    2dd4:	4f 92       	push	r4
    2dd6:	5f 92       	push	r5
    2dd8:	6f 92       	push	r6
    2dda:	7f 92       	push	r7
    2ddc:	8f 92       	push	r8
    2dde:	9f 92       	push	r9
    2de0:	af 92       	push	r10
    2de2:	bf 92       	push	r11
    2de4:	cf 92       	push	r12
    2de6:	df 92       	push	r13
    2de8:	ef 92       	push	r14
    2dea:	ff 92       	push	r15
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	ca 1b       	sub	r28, r26
    2dfa:	db 0b       	sbc	r29, r27
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	09 94       	ijmp

00002e08 <__epilogue_restores__>:
    2e08:	2a 88       	ldd	r2, Y+18	; 0x12
    2e0a:	39 88       	ldd	r3, Y+17	; 0x11
    2e0c:	48 88       	ldd	r4, Y+16	; 0x10
    2e0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e10:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e12:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e14:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e16:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e18:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e1a:	b9 84       	ldd	r11, Y+9	; 0x09
    2e1c:	c8 84       	ldd	r12, Y+8	; 0x08
    2e1e:	df 80       	ldd	r13, Y+7	; 0x07
    2e20:	ee 80       	ldd	r14, Y+6	; 0x06
    2e22:	fd 80       	ldd	r15, Y+5	; 0x05
    2e24:	0c 81       	ldd	r16, Y+4	; 0x04
    2e26:	1b 81       	ldd	r17, Y+3	; 0x03
    2e28:	aa 81       	ldd	r26, Y+2	; 0x02
    2e2a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e2c:	ce 0f       	add	r28, r30
    2e2e:	d1 1d       	adc	r29, r1
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	ed 01       	movw	r28, r26
    2e3c:	08 95       	ret

00002e3e <do_rand>:
    2e3e:	a0 e0       	ldi	r26, 0x00	; 0
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e5 e2       	ldi	r30, 0x25	; 37
    2e44:	f7 e1       	ldi	r31, 0x17	; 23
    2e46:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__prologue_saves__+0x10>
    2e4a:	ec 01       	movw	r28, r24
    2e4c:	a8 80       	ld	r10, Y
    2e4e:	b9 80       	ldd	r11, Y+1	; 0x01
    2e50:	ca 80       	ldd	r12, Y+2	; 0x02
    2e52:	db 80       	ldd	r13, Y+3	; 0x03
    2e54:	a1 14       	cp	r10, r1
    2e56:	b1 04       	cpc	r11, r1
    2e58:	c1 04       	cpc	r12, r1
    2e5a:	d1 04       	cpc	r13, r1
    2e5c:	41 f4       	brne	.+16     	; 0x2e6e <do_rand+0x30>
    2e5e:	84 e2       	ldi	r24, 0x24	; 36
    2e60:	a8 2e       	mov	r10, r24
    2e62:	89 ed       	ldi	r24, 0xD9	; 217
    2e64:	b8 2e       	mov	r11, r24
    2e66:	8b e5       	ldi	r24, 0x5B	; 91
    2e68:	c8 2e       	mov	r12, r24
    2e6a:	87 e0       	ldi	r24, 0x07	; 7
    2e6c:	d8 2e       	mov	r13, r24
    2e6e:	c6 01       	movw	r24, r12
    2e70:	b5 01       	movw	r22, r10
    2e72:	2d e1       	ldi	r18, 0x1D	; 29
    2e74:	33 ef       	ldi	r19, 0xF3	; 243
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__divmodsi4>
    2e7e:	27 ea       	ldi	r18, 0xA7	; 167
    2e80:	31 e4       	ldi	r19, 0x41	; 65
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	50 e0       	ldi	r21, 0x00	; 0
    2e86:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__mulsi3>
    2e8a:	7b 01       	movw	r14, r22
    2e8c:	8c 01       	movw	r16, r24
    2e8e:	c6 01       	movw	r24, r12
    2e90:	b5 01       	movw	r22, r10
    2e92:	2d e1       	ldi	r18, 0x1D	; 29
    2e94:	33 ef       	ldi	r19, 0xF3	; 243
    2e96:	41 e0       	ldi	r20, 0x01	; 1
    2e98:	50 e0       	ldi	r21, 0x00	; 0
    2e9a:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__divmodsi4>
    2e9e:	ca 01       	movw	r24, r20
    2ea0:	b9 01       	movw	r22, r18
    2ea2:	2c ee       	ldi	r18, 0xEC	; 236
    2ea4:	34 ef       	ldi	r19, 0xF4	; 244
    2ea6:	4f ef       	ldi	r20, 0xFF	; 255
    2ea8:	5f ef       	ldi	r21, 0xFF	; 255
    2eaa:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__mulsi3>
    2eae:	6e 0d       	add	r22, r14
    2eb0:	7f 1d       	adc	r23, r15
    2eb2:	80 1f       	adc	r24, r16
    2eb4:	91 1f       	adc	r25, r17
    2eb6:	97 ff       	sbrs	r25, 7
    2eb8:	04 c0       	rjmp	.+8      	; 0x2ec2 <do_rand+0x84>
    2eba:	61 50       	subi	r22, 0x01	; 1
    2ebc:	70 40       	sbci	r23, 0x00	; 0
    2ebe:	80 40       	sbci	r24, 0x00	; 0
    2ec0:	90 48       	sbci	r25, 0x80	; 128
    2ec2:	68 83       	st	Y, r22
    2ec4:	79 83       	std	Y+1, r23	; 0x01
    2ec6:	8a 83       	std	Y+2, r24	; 0x02
    2ec8:	9b 83       	std	Y+3, r25	; 0x03
    2eca:	9b 01       	movw	r18, r22
    2ecc:	3f 77       	andi	r19, 0x7F	; 127
    2ece:	c9 01       	movw	r24, r18
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	ea e0       	ldi	r30, 0x0A	; 10
    2ed6:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__epilogue_restores__+0x10>

00002eda <rand_r>:
    2eda:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <do_rand>
    2ede:	08 95       	ret

00002ee0 <rand>:
    2ee0:	89 e8       	ldi	r24, 0x89	; 137
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <do_rand>
    2ee8:	08 95       	ret

00002eea <srand>:
    2eea:	a0 e0       	ldi	r26, 0x00	; 0
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	80 93 89 00 	sts	0x0089, r24
    2ef2:	90 93 8a 00 	sts	0x008A, r25
    2ef6:	a0 93 8b 00 	sts	0x008B, r26
    2efa:	b0 93 8c 00 	sts	0x008C, r27
    2efe:	08 95       	ret

00002f00 <memcmp>:
    2f00:	fb 01       	movw	r30, r22
    2f02:	dc 01       	movw	r26, r24
    2f04:	04 c0       	rjmp	.+8      	; 0x2f0e <memcmp+0xe>
    2f06:	8d 91       	ld	r24, X+
    2f08:	01 90       	ld	r0, Z+
    2f0a:	80 19       	sub	r24, r0
    2f0c:	21 f4       	brne	.+8      	; 0x2f16 <memcmp+0x16>
    2f0e:	41 50       	subi	r20, 0x01	; 1
    2f10:	50 40       	sbci	r21, 0x00	; 0
    2f12:	c8 f7       	brcc	.-14     	; 0x2f06 <memcmp+0x6>
    2f14:	88 1b       	sub	r24, r24
    2f16:	99 0b       	sbc	r25, r25
    2f18:	08 95       	ret

00002f1a <strcat>:
    2f1a:	fb 01       	movw	r30, r22
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	0d 90       	ld	r0, X+
    2f20:	00 20       	and	r0, r0
    2f22:	e9 f7       	brne	.-6      	; 0x2f1e <strcat+0x4>
    2f24:	11 97       	sbiw	r26, 0x01	; 1
    2f26:	01 90       	ld	r0, Z+
    2f28:	0d 92       	st	X+, r0
    2f2a:	00 20       	and	r0, r0
    2f2c:	e1 f7       	brne	.-8      	; 0x2f26 <strcat+0xc>
    2f2e:	08 95       	ret

00002f30 <__mulsi3>:
    2f30:	62 9f       	mul	r22, r18
    2f32:	d0 01       	movw	r26, r0
    2f34:	73 9f       	mul	r23, r19
    2f36:	f0 01       	movw	r30, r0
    2f38:	82 9f       	mul	r24, r18
    2f3a:	e0 0d       	add	r30, r0
    2f3c:	f1 1d       	adc	r31, r1
    2f3e:	64 9f       	mul	r22, r20
    2f40:	e0 0d       	add	r30, r0
    2f42:	f1 1d       	adc	r31, r1
    2f44:	92 9f       	mul	r25, r18
    2f46:	f0 0d       	add	r31, r0
    2f48:	83 9f       	mul	r24, r19
    2f4a:	f0 0d       	add	r31, r0
    2f4c:	74 9f       	mul	r23, r20
    2f4e:	f0 0d       	add	r31, r0
    2f50:	65 9f       	mul	r22, r21
    2f52:	f0 0d       	add	r31, r0
    2f54:	99 27       	eor	r25, r25
    2f56:	72 9f       	mul	r23, r18
    2f58:	b0 0d       	add	r27, r0
    2f5a:	e1 1d       	adc	r30, r1
    2f5c:	f9 1f       	adc	r31, r25
    2f5e:	63 9f       	mul	r22, r19
    2f60:	b0 0d       	add	r27, r0
    2f62:	e1 1d       	adc	r30, r1
    2f64:	f9 1f       	adc	r31, r25
    2f66:	bd 01       	movw	r22, r26
    2f68:	cf 01       	movw	r24, r30
    2f6a:	11 24       	eor	r1, r1
    2f6c:	08 95       	ret

00002f6e <_exit>:
    2f6e:	f8 94       	cli

00002f70 <__stop_program>:
    2f70:	ff cf       	rjmp	.-2      	; 0x2f70 <__stop_program>
